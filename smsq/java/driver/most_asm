; base area SMSQ GOLD Drivers

	section header

	xref	smsq_end

header_base
	dc.l	gl_most-header_base	 ; length of header
	dc.l	0			 ; module length unknown
	dc.l	smsq_end-gl_most	 ; loaded length
	dc.l	0			 ; checksum
	dc.l	0			 ; always select
	dc.b	1			 ; 1 level down
	dc.b	0
	dc.w	smsq_name-*

smsq_name
	dc.w	17,'SMSQ JAVA Drivers '
	dc.l	'    '
	dc.w	$200a


	section base

	xref	iob_smsq		 ; SMSQ IOB bits

	xref	qd_int2

	xref	hdop_init
	xref	nfa_init
	xref	sfa_init
	xref	win_init
	xref	flp_init
	xref	sms_hdop
	xref	dev_init
	xref	nul_init
	xref	pipe_init
	xref	rd_init
	xref	iob_init
	xref	history_init
	xref	ssss_init
	xref	hdop_keyr
	xref	scrap_init

	include 'dev8_keys_qlv'
	include 'dev8_keys_sys'
	include 'dev8_keys_psf'
	include 'dev8_keys_68000'
	include 'dev8_keys_qlhw'
	include 'dev8_keys_qdos_sms'
	include 'dev8_smsq_smsq_base_keys'
	include 'dev8_smsq_smsq_config_keys'
	include 'dev8_smsq_gold_keys'
	include 'dev8_keys_qdos_ioa'
	include 'dev8_keys_java'
	include 'dev8_mac_assert'


gl_most
	bra.l	start

	xdef	iou_dirshr
iou_dirshr dc.w 0	; shared directories supported	(RAM disk)


	section init
start
	jsr	hdop_init
	jsr	dev_init
	jsr	nul_init
	jsr	pipe_init
	jsr	rd_init
	jsr	iob_init
	jsr	history_init
	jsr	flp_init
	jsr	sfa_init
	jsr	nfa_init
	jsr	win_init
	jsr	ssss_init
	jsr	scrap_init

sys_init

; When we have linked in the interrupt servers, we can enable the interrupts

	moveq	#sms.xtop,d0
	trap	#do.sms2

	clr.w	psf_sr(a5)		 ; we can clear interrupts on return

	lea	qd_int2,a0		 ; set interrupt routine address
	lea	exv_i2,a5
	bsr.s	irm_wbase

	moveq	#$ffffff00+pc.maskt+pc.intri,d0 ; enable transmit interrupt
	move.b	d0,sys_qlir(a6) 	 ; .... and always clear interface int
	move.b	d0,pc_intr

	lea	hw_poll,a0
	lea	sms.hpoll,a5		 ; and tidy up
	bsr.s	irm_wbase

	lea	sms_hdop,a0
	lea	sms.t1tab+sms.hdop*4,a5  ; set hdop
	bsr.s	irm_wbase
	bra.s	boot_dev		; (try to) set boot device

irm_wbase
	move.l	a0,d0			 ; write a0 to vector area
	swap	d0
	bsr.s	wb_do
	swap	d0
wb_do
	jmp	sms.wbase

;+++
; Java polling interrupt server operating off the frame interrupt.
; Clears all interrupts.
; See SHD_POLL.
;---
hw_poll
	moveq	#0,d7
	move.b	d7,pc_intr		 ; clear ALL interrupts
	rts


;+++++++++++++++++++++++++++
; try to set the default devices
;+++++++++++++++++++++++++++

	xref	gu_fopen
	xref	gu_fclos

boot_dev
	move.l	jva_lkptr,d0		; get ptr to linkage block
	beq.s	end_bt			; huh???
	add.l	#jva_boot,d0
	move.l	d0,a0
	move.l	(a0),d0 		; possible boot device
	beq.s	end_bt			; none
	lea	boot_nam,a0
	move.l	d0,2(a0)		; boot device
	moveq	#ioa.kshr,d3
	jsr	gu_fopen		; try to open boot file
	beq.s	boot_fnd		; OK
end_bt	moveq	#0,d0			; not found, doesn't matter
set_rts rts

boot_fnd
	jsr	gu_fclos		; close file again
	lea	sys_datd(a6),a0 	; set as data default
	bsr.s	boot_set
	lea	sys_prgd(a6),a0 	; and as prog default
boot_set
	move.l	(a0),d0 		; set?
	beq.s	set_end
	move.l	d0,a0
	move.l	boot_nam+2,2(a0)	; set boot device as default
	moveq	#0,d0
set_end rts


boot_nam
	dc.w	9,'nfa1_boot'

	end

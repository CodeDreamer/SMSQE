; SMSQ_CACHE Cache Handling Fiddles 68040 copyback  V2.0   1994  Tony Tebby
;
; This module is checked after the main SMSQ OS module has been loaded
; There is no permanent cade and the select routine always returns 0.
; As a side effect, however, it sets up the cache routines in the base area
; and, if required, moves the trap #0 to #3 entry points.

	section header

	include 'dev8_mac_creg'
	include 'dev8_keys_68000'
	include 'dev8_keys_stella_bl'
	include 'dev8_smsq_smsq_base_keys'

header_base
	dc.l	cache_end-header_base	 ; length of header
	dc.l	0			 ; module length unknown
	dc.l	0			 ; loaded length
	dc.l	0			 ; checksum
	dc.l	cache_set-header_base	 ; select!!!
	dc.b	0			 ; main level
	dc.b	0
	dc.w	smsq_name-*

smsq_name
	dc.w	33,'SMSQ Copyback Cache Handling Code '
	dc.l	'    '
	dc.w	$200a

; this version sets only 68040 caches for copyback

cache_set
	lea	cache_40c,a1		 ; cache defs

	move.l	a5,-(sp)
	lea	sms.cinvd,a5
	moveq	#($10*7)/2-1,d1 	 ; copy seven lots of $10 bytes
cache_copy
	move.w	(a1)+,d0		 ; data to write
	jsr	sms.wbase		 ; write it
	dbra	d1,cache_copy

	move.l	(sp)+,a5

	moveq	#0,d0			 ; nothing to load
	rts

cache_40c
	rts
	dc.w	0,0,0,0,0,0,0		 ; pad to 16 bytes

	cpusha				 ; (push data and) invalidate inst cache
	rts
	dc.w	0,0,0,0,0,0		 ; pad to 16 bytes

	moveq	#0,d0			 ; disable everything
	pcreg	cacr
	cpusha				 ; then push
	rts
	dc.w	0,0,0			 ; pad to 16 bytes

	moveq	#0,d0			 ; in copyback mode disable instruction
	pcreg	cacr			 ; does not ensure that the instruction
	cpusha				 ; cache will be re-filled correctly
	rts				 ; so we must disable both
	dc.w	0,0,0

	cinva				 ; invalidate both caches
	move.l	#$a0c08000,d0		 ; enable all caches, invalidate branch
	pcreg	cacr
	rts
	dc.w	0			 ; pad to 16 bytes

	cinvi				 ; invalidate inst cache
	move.l	#$a0c08000,d0		 ; enable all caches, invalidate branch
	pcreg	cacr
	rts
	dc.w	0			 ; pad to 16 bytes

	dc.w	0,0,0,0,0,0,0		 ; no tricks on trap
	cpusha				 ; push data, invalidate instruction cache on load

cache_end
	end

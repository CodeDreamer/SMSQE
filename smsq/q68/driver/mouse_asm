; Q68 Mouse Interrupt (or Poll) Routine  V1.02 (c) W. Lenerz 2017 - 2023

; 1.02 2023-12-06   no longer a minimod, is rommable, mouse polls, centre button
;		    works again, no long "afterscroll" in high colour modes
;
; 1.01 2020-11-12   removed dead code

; this is called from the external interrupt routine. A3 points to the linakge.

; mouse button 1 (left) = 1
; mouse button 2 (right) = 2
; both	left & right = 3
; middle button = 4

	section mouse

	xdef	mse_init

	include 'dev8_keys_con'
	include 'dev8_keys_iod'
	include 'dev8_keys_sys'
	include 'dev8_keys_qu'
	include 'dev8_keys_qdos_sms'
	include 'dev8_smsq_kbd_keys'
	include 'dev8_keys_q68'
	include 'dev8_smsq_smsq_base_keys'



; (24 bytes needed for 3 service routines links - scheme as set out in keys_iod)

mse.ppt equ	iod_iolk		; packet pointer after 3 linkage areas
mse.btn equ	mse.ppt+2		; mouse button
mse.xmv equ	mse.btn+2		; x...
mse.ymv equ	mse.xmv+2		; ... and y movement
mse.scr equ	mse.ymv+2		; scroll wheel
mse.tot equ	mse.scr+4		; total bytes needed
	
mse_init
	moveq	#mse.tot,d1		; this much space
	clr.l	d2
	move.l	d2,d3
	moveq	#sms.achp,d0		; allocate
	trap	#1
	tst.l	d0
	bne.s	mse_out
	moveq	#sms.lexi,d0
	lea	mse_intr,a1
	move.l	a1,4(a0)
	trap	#1
mse_out
	rts

;--- mouse poll routine
;
; Coming here from the main poll loop, nearly all regs have been stacked
; and may be safely used - with the exception of A6 and D7 which should not be
; modified.
; On entry a6 points to the system variables.
; Since this is called from a loop in the main poll routine, exit should
; be made with RTS.
;
; Data from the mouse comes in packets of 3 or 4 bytes : button, x mvt, y mvt,
; + posibly scroll wheel.
; Only when the last byte of a packet is collected is the mouse data acted upon,
; in the meantime the intermediary bytes are stored at mse.btn(a3) and following.
;
; A mouse interrupt sets bit#0 of mouse_status : if this bit is set, a byte is
; ready to be collected. This bit is cleared automatically  when a value
; is written to mouse_unlock (for keys see dev8_keys_q68).
;
;
;-------------------------
	  
mse_intr
	move.b	mouse_status,d3
	btst	#m.rcv,d3		; any mouse activity?
	beq.s	mse_done		; no, must have been another int ->
	move.l	sys_clnk(a6),d0 	; get console linkage
	beq.s	mse_done		; there is none?! ->
	move.l	d0,a5			; keep
	clr.l	d1
	move.b	mouse_code,d1		; get mouse code (byte sent by mouse)
	st	mouse_unlock		; release mouse receive status

	move.w	mse.ppt(a3),d0		; current mouse status
	bne.s	mse_nf			; not first byte
	btst	#3,d1			; if 1st byte, this must be set
	beq.s	mse_done		; not set, redo

mse_nf	ext.w	d1			; mouse code as a word
	move.w	mse.ppt(a3),d0		; current mouse status
	move.w	d1,mse.btn(a3,d0.w)	; store this value
	addq.w	#2,d0			; next place to store value
	btst	#m.type,d3		; wheel mouse?
	bne.s	mse_whl 		; yes
	cmp.w	#6,d0			; no, got 3rd byte?
	bne.s	mse_add 		; no, not done yet
	bra.s	mse_pckt		; yes, treat packet now
mse_whl cmp.b	#8,d0			; got the entire packet?
	beq.s	mse_pckt		; yes ->
mse_add
	move.w	d0,mse.ppt(a3)		; store current byte ptr
	bra.s	mse_intr		; try to get next byte
mse_done
	rts

mse_pckt
; here a (3 or 4 byte) mouse packet is complete.
	clr.w	mse.ppt(a3)		; prepare next packet
	move.l	mse.xmv(a3),d2		; X|Y mouse move
	beq.s	mse_scr 		; no move, check scroll
	move.w	d2,d1			; y move
	swap	d2			; x move
	neg.w	d1			; apparently vertical mvt is inverted
; note d1 and d2 are switched here, compared to std code
	move.w	d2,d0			; supposed count
	bpl.s	mse_ycount		; ... it's positive
	neg.w	d0
mse_ycount
	move.w	d1,d3			; other supposed count
	bge.s	mse_addinc		; ... it's positive
	neg.w	d3
mse_addinc
	add.w	d3,d0			; total count
	beq.s	mse_setinc		; ... none
	add.w	pt_xicnt(a5),d0 	; total so far
	lsr.w	#1,d0			; reduced
	add.b	pt_wake(a5),d0		; wake up speed
	lsr.w	#1,d0
	addq.w	#1,d0			; make sure that there is a move
mse_setinc
	move.w	d0,pt_xicnt(a5) 	; update count
	add.w	d2,pt_xinc(a5)
	add.w	d1,pt_yinc(a5)		; and distance moved

; check mouse scrollwheel
mse_scr
	move.l	sys_klnk(a6),d0
	beq.s	mse_done
	move.l	d0,a4			; keyboard linkage
	move.w	mse.btn(a3),d2		; mouse button
	move.w	mse.scr(a3),d3		; mouse wheel move
	beq.s	mse_btn 		; no mouse wheel activity, check buttons
	move.l	sys_ckyq(a6),d0 	; current kbd queue
	beq.s	mse_btn 		; none
	move.l	d0,a2
	move.w	#$D1D9,d1		; ALT+dwn/ALT+up
	btst	#kb..ctrl,kb_stat(a4)	; CTRL pressed?
	beq.s	mse_wct 		; ...no
	move.w	#$C1C9,d1		; ALT+right/ALT+left
mse_wct
	tst.b	d3			; negative?
	bpl.s	mse_chk 		; no ->
	ror.w	#8,d1			; yes, use other keystoke
	neg.b	d3

; Check that there is not still a scroll char in the kbd queue. If there is,
; don't add new ones.
; This avoids - in high colour modes - that scrolling keeps on going long
; after the scrollwheel movement ceases, due to the slow speed at which the
; screen is redrawn etc in those colour modes.
; This might mean that scrolling will be slower in low colour modes.

mse_chk
	move.l	qu_nexti(a2),a3 	; queue next in
	move.l	qu_nexto(a2),a1 	; next out
	cmp.l	a1,a3			; anything there?
	beq.s	mse_inp 		; no, so queue is empty
	cmp.b	(a1),d1 		; yes, same?
	beq.s	mse_btn 		; yes, so insert nothing into queue
mse_inp
	andi.w	#15,d3
	bsr.s	mse_dol 		; insert chars into kbd queue

; check mouse buttons
mse_btn 				; d2.w = button clicked
	andi.b	#7,d2			; only keep lower 3 bits
	cmp.b	#2,d2			; more than right/left click ?
	bgt.s	cntr_btn		; yes, so btn 3 or 4, do centre button
	move.b	d2,pt_bpoll(a5) 	; this is new button or old button still depressed
	clr.b	pt_lstuf(a5)		; it isn't a stuff
ms_exit
	rts

cntr_btn
	st	kb_err(a4)
	rts

ioq_pbyt				; adapted from smsq_ioq_pbyt_asm
	move.b	d1,(a3)+		; set byte
	cmp.l	qu_endq(a2),a3		; next off end?
	bne.s	iqp_seti		; no
	lea	qu_strtq(a2),a3 	; yes, reset queue pointer
iqp_seti
	cmp.l	qu_nexto(a2),a3 	; is there room?
	beq.s	ioq_out 		; no, done
	move.l	a3,qu_nexti(a2) 	; set next in
mse_dol
	dbf	d3,ioq_pbyt
ioq_out
	rts


	end

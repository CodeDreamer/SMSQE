100 REMark this prog is also called from dev8_extras_newversion_bas - don't change unless that is changed, too
110 REMark use "t" to zip the binaries
120 REMark command string should be,e.g., "quit binaries delete docopy version312" or just the version number  "312"
130 REMark the docopy must be the last switch before the version.
140 REMark if binaries : also do binaries into separate zipfile
150 REMark if delete delete the binaries (after zipping)
160 a$=cmd$
170 version$="NIX"
180 docopy%=0
190 binaries%=0
200 del%=0
210 quit%=0
220 IF a$<>""
230   IF "binaries" INSTR a$:binaries%=1
240   IF "delete" INSTR a$: del%=1
250   IF "docopy" INSTR a$:docopy%=1
260   IF "quit" INSTR a$:quit%=1
270   t%="version" INSTR a$
280   IF t% : version$=a$(t%+7 TO t%+10)
290 END IF
300 smsqe$="smsqe"&version$&".zip"
310 ddr$="ram3_"
320 p
330 IF quit%:QUIT
340 :
350 DEFine PROCedure p
360   do_all
370   do_individual_dirs
380   IF docopy%:  do_copy a$
390 END DEFine p
400 :
410 DEFine PROCedure do_all
420 REMark this zips the entire SMSQE sources
430 REMark ensure that all non source files have been erased first!
440 LOCal zip$
450   del_zips
460   IF binaries%:do_binaries del%
470   PRINT "Zipping all to one zip file "
480   do_zip " -Q4r9 "&ddr$&smsqe$&" dd_* dv3_* ee_* extras_* iod_* keys_* lang_* mac_* minerva_* sbsext_* smsq_* sys_* uti_* util_*  changes_txt readme_txt styleguide_txt whats_new_txt licence_doc licence_txt"
490 END DEFine do_all
500 :
510 DEFine PROCedure do_individual_dirs
520 LOCal lp%,dirname$
530   RESTORE CURRENT_LINE : REMark make sure no other DATA statement is between this proc anf the "del_zips" proc
540   REPeat lp%
550     READ dirname$
560     IF dirname$="":EXIT lp%
570     PRINT "Zipping "&dirname$
580     do_zip " -Q4r9 "&ddr$&dirname$&".zip "&dirname$&"_*"
590   END REPeat lp%
600   do_qxl_pc
610 END DEFine do_individual_dirs
620 :
630 DEFine PROCedure do_qxl_pc
640 LOCal a$
650   a$=DEV_USE$(7)
660   DEV_USE 7,"nfa1_qxl_"
670   do_zip " -Q4j9 "&ddr$&"qxl.zip "& "dev7_*.asm dev7_qxl.inc dev7_qxlh.exe dev7_current.sts"
680   DEV_USE 7,a$
690 END DEFine do_qxl_pc
700 :
710 DEFine PROCedure sa
720   SAVE_O dev8_extras_zip_it_bas
730 END DEFine sa
740 :
750 DEFine PROCedure del_zips
760 REMark just delete the zip files
770 LOCal lp%,dirname$
780   DELETE ddr$&smsqe$
790   RESTORE CURRENT_LINE
800   REPeat lp%
810     READ dirname$
820     IF dirname$="":EXIT lp%
830   DELETE ddr$&dirname$&".zip"
840   END REPeat lp%
850   DATA "dd","dv3","ee","extras","iod","keys","lang","mac","minerva","sbsext","smsq","sys","uti","util"
860   DATA ""
870 END DEFine d
880 :
890 DEFine PROCedure s
900 REMark this resetss the data etc dirs to acceptable values
910   DEST_USE dev1_
920   DATA_USE dev1_basic_
930   PROG_USE dev1_progs_
940 END DEFine s
950 :
960 DEFine PROCedure t
970   ddr$="ram3_"
980   smsqe$="3.12"
990   do_binaries 0
1000 END DEFine t
1010 :
1020 DEFine PROCedure do_binaries (do_delete%)
1030 REMark this zips all binary versions and then deletes them
1040 LOCal nbr%,lp%,source$,dest$,zip$,f$
1050   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
1060   CLS
1070   zip$ =' -Q4j9 '&f$&' '
1080   RESTORE CURRENT_LINE
1090   READ nbr%
1100   FOR lp% =1 TO nbr%
1110     READ source$,dest$
1120     PRINT "copying "& source$
1130     COPY_O source$,ddr$&dest$
1140     zip$=zip$&ddr$&dest$ & ' '
1150     IF do_delete% AND NOT ("_txt" INSTR source$): DELETE source$
1160   END FOR lp%
1170   DELETE f$
1180   PRINT "Zipping binaries..."
1190   do_zip zip$
1200   RESTORE  CURRENT_LINE
1210   READ nbr%
1220   FOR lp%=1 TO nbr%:READ dest$,dest$:DELETE ddr$&dest$
1230   PRINT "Binaries done..."
1240   DATA 12               : REMark ADJUST THIS if files are addded/removed
1250   DATA "dev8_smsq_atari_SMSQ.PRG", "atari_SMSQ.PRG"
1260   DATA "dev8_smsq_gold_gold",      "GoldCard_bin"
1270   DATA "dev8_smsq_gold_gold8",     "GoldCard_256colours_bin"
1280   DATA "dev8_smsq_q40_rom",        "Q40_rom"
1290   DATA "dev8_smsq_qxl_smsqe.exe",  "qxl_smsqe.exe"
1300   DATA "dev8_smsq_aurora_SMSQE",   "Aurora_bin"
1310   DATA "dev8_smsq_java_java",      "SMSQmulator"
1320   DATA "dev8_ee_ptr_gen",          "ptr_gen"
1330   DATA "dev8_ee_wman_wman",        "wman"
1340   DATA "dev8_whats_new_txt",       "whats_new_txt"
1350   DATA "dev8_changes_txt",         "changes_txt"
1360   DATA "dev8_readme_txt",          "readme_txt"
1370 END DEFine do_binaries
1380 :
1390 DEFine PROCedure z
1400   LOCal lp%,zip$
1410   RESTORE 1260
1420   zip$=' -j9 '&'ram1_m.zip '
1430   REPeat lp%
1440     READ a$
1450     IF a$="":EXIT lp%
1460     zip$=zip$&a$&" "
1470   END REPeat lp%
1480   do_zip zip$
1490 END DEFine z
1500 :
1510 DEFine PROCedure do_zip (zip$)
1520   DEST_USE "dev8_"  :PROG_USE "dev8_" :DATA_USE "dev8_"
1530   EW dev1_progs_zip;zip$
1540   s
1550 END DEFine do_zip
1560 :
1570 DATA "dev8_ee_wman_erstr_asm","dev8_ee_wman_data_asm"
1580 DATA "dev8_iod_con2_ptr_wremv_asm"
1590 DATA ""
1600 :
1610 DEFine PROCedure do_copy
1620 LOCal ddr$,lp%,a$ ,f$
1630   ddr$="ram3_"
1640   COPY_O ddr$&smsqe$,"nfa2_new_"&smsqe$
1650   RESTORE 830
1660   REPeat lp%
1670     READ a$
1680     IF a$="":EXIT lp%
1690     COPY_O ddr$&a$&".zip","nfa2_new_"&a$&".zip"
1700   END REPeat lp%
1710   COPY_O ddr$&"qxl.zip","nfa2_new_qxl.zip"
1720   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
1730   COPY_O f$,"nfa2_new_"&"smsqe"&version$&"_binaries.zip"
1740 END DEFine do_copy
1750 :

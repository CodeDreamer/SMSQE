100 REMark this prog is also called from dev8_extras_newversion_bas - don't change unless that is changed, too
110 REMark use "t" to zip the binaries
120 REMark command string should be,e.g., "quit binaries delete docopy version312" or just the version number  "312"
130 REMark the docopy must be the last switch before the version.
140 REMark if binaries : also do binaries into separate zipfile
150 REMark if delete delete the binaries (after zipping)
160 a$=cmd$
170 version$="NIX"
180 docopy%=0
190 binaries%=0
200 del%=0
210 quit%=0
220 IF a$<>""
230   IF "binaries" INSTR a$:binaries%=1
240   IF "delete" INSTR a$: del%=1
250   IF "docopy" INSTR a$:docopy%=1
260   IF "quit" INSTR a$:quit%=1
270   t%="version" INSTR a$
280   IF t% : version$=a$(t%+7 TO t%+10)
290 END IF
300 smsqe$="smsqe"&version$&".zip"
310 ddr$="ram3_"
320 p
330 IF quit%:QUIT
340 :
350 DEFine PROCedure p
360   do_all
370   do_individual_dirs
380   IF docopy%:  do_copy a$
390 END DEFine p
400 :
410 DEFine PROCedure do_all
420 REMark this zips the entire SMSQE sources
430 REMark ensure that all non source files have been erased first!
440 LOCal zip$
450   del_zips
460   IF binaries%:do_binaries del%
470   PRINT "Zipping all to one zip file "
480   do_zip " -Q4r9 "&ddr$&smsqe$&" dd_* dv3_* ee_* extras_* iod_* keys_* lang_* mac_* minerva_* sbsext_* smsq_* sys_* uti_* util_*  changes_txt readme_txt styleguide_txt whats_new_txt licence_doc licence_txt"
490 END DEFine do_all
500 :
510 DEFine PROCedure do_individual_dirs
520 LOCal lp%,dirname$
530   RESTORE CURRENT_LINE : REMark make sure no other DATA statement is between this proc anf the "del_zips" proc
540   REPeat lp%
550     READ dirname$
560     IF dirname$="":EXIT lp%
570     PRINT "Zipping "&dirname$
580     do_zip " -Q4r9 "&ddr$&dirname$&".zip "&dirname$&"_*"
590   END REPeat lp%
600   do_qxl_pc
610 END DEFine do_individual_dirs
620 :
630 DEFine PROCedure do_qxl_pc
640 LOCal a$
650   a$="nfa1_qxl_*"
660   do_zip " -Q4j9 "&ddr$&"qxl.zip "& a$
670 END DEFine do_qxl_pc
680 :
690 DEFine PROCedure sa
700   SAVE_O dev8_extras_zip_it_bas
710 END DEFine sa
720 :
730 DEFine PROCedure del_zips
740 REMark just delete the zip files
750 LOCal lp%,dirname$
760   DELETE ddr$&smsqe$
770   RESTORE CURRENT_LINE
780   REPeat lp%
790     READ dirname$
800     IF dirname$="":EXIT lp%
810   DELETE ddr$&dirname$&".zip"
820   END REPeat lp%
830   DATA "dd","dv3","ee","extras","iod","keys","lang","mac","minerva","sbsext","smsq","sys","uti","util"
840   DATA ""
850 END DEFine d
860 :
870 DEFine PROCedure s
880 REMark this resets the data etc dirs to acceptable values, no longer used
890   DEST_USE dev1_
900   DATA_USE dev1_basic_
910   PROG_USE dev1_progs_
920 END DEFine s
930 :
940 DEFine PROCedure t
950   ddr$="ram3_"
960   smsqe$="3.12"
970   do_binaries 0
980 END DEFine t
990 :
1000 DEFine PROCedure do_binaries (do_delete%)
1010 REMark this zips all binary versions and then possibly deletes them
1020 LOCal nbr%,lp%,source$,dest$,zip$,f$
1030   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
1040   CLS
1050   zip$ =' -Q4j9 '&f$&' '
1060   RESTORE CURRENT_LINE
1070   REPeat lp%
1080     READ source$,dest$
1090     IF source$="":EXIT lp%
1100     PRINT "copying "& source$
1110     COPY_O source$,ddr$&dest$
1120     zip$=zip$&ddr$&dest$ & ' '
1130     IF do_delete% AND NOT ("_txt" INSTR source$): DELETE source$
1140   END REPeat lp%
1150   DELETE f$
1160   PRINT "Zipping binaries..."
1170   do_zip zip$
1180   REMark now delete destinations
1190   RESTORE CURRENT_LINE
1200   REPeat lp%
1210     READ dest$,dest$
1220     IF dest$="":EXIT lp%
1230     DELETE ddr$&dest$
1240   END REPeat lp%
1250   PRINT "Binaries done..."
1260   DATA "dev8_smsq_atari_SMSQ.PRG",  "SMSQE.PRG"       : REMark PRG file for ATARI ST/TT, ready to be used
1270   DATA "dev8_smsq_gold_gold",       "GoldCard_bin"    : REMark gold card Ql colours
1280   DATA "dev8_smsq_gold_gold8",      "GoldCard_256colours_bin"
1290   DATA "dev8_smsq_q40_rom",         "Q40_rom"         : REMark q40/q60 use as rom / lrespr file
1300   DATA "dev8_smsq_qxl_smsqe.exe",   "SMSQEQXL.EXE"    : REMark EXE to be run under DOS on i386 compatible systems with a QXL card installed, ready to be used
1310   DATA "dev8_smsq_aurora_SMSQE",    "Aurora_bin"      : REMark aurora 8 bit
1320   DATA "dev8_smsq_java_java",       "SMSQE"           : REMark Code file for SMSQmulator, ready to be used
1330   DATA "dev8_smsq_qpc_smsqe.bin",   "SMSQE.bin"       : REMark Code file for QPC2, ready to be used
1340   DATA "dev8_smsq_q68_QL_RAM.BIN",  "Q68_SMSQ.SYS"    : REMark ssqe for Q68, standalone
1350   DATA "nfa1_Q68_SMSQ.WIN",         "Q68_SMSQ.WIN"    : REMark smsqe for Q68, win drive
1360   DATA "dev8_smsq_qpc_smsqe.bin",   "SMSQE.bin"       : REMark Code file for QPC2, ready to be used
1370   DATA "dev8_ee_ptr_gen",           "ptr_gen"         : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
1380   DATA "dev8_ee_wman_wman",         "wman"            : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
1390   DATA "DEV8_smsq_q68_QL_RAM.BIN",  "Q68_SMSQ.WIN"    : REMark Code file for Q68 (win file), ready to be used
1400   DATA "DEV8_smsq_q68_QL_RAM.BIN3", "Q68_RAM.SYS "    : REMark Code file for Q68 ("naked" file), ready to be used
1410   DATA "dev8_ee_hot_rext_english",  "hot_rext_english": REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
1420   DATA "dev8_ee_hot_rext_french",   "hot_rext_french" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
1430   DATA "dev8_ee_hot_rext_german",   "hot_rext_german" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
1440   DATA "dev8_whats_new_txt",        "whats_new_txt"
1450   DATA "dev8_changes_txt",          "changes_txt"
1460   DATA "dev8_readme_txt",           "readme_txt"
1470   DATA "","" : REMark leave TWO empty strings here
1480 END DEFine do_binaries
1490 :
1500 DEFine PROCedure z
1510   LOCal lp%,zip$
1520   RESTORE 1240
1530   zip$=' -j9 '&'ram1_m.zip '
1540   REPeat lp%
1550     READ a$
1560     IF a$="":EXIT lp%
1570     zip$=zip$&a$&" "
1580   END REPeat lp%
1590   do_zip zip$
1600 END DEFine z
1610 :
1620 DEFine PROCedure do_zip (zip$)
1630 LOCal destt$,progg$,dataa$
1640   destt$=DESTD$
1650   progg$=PROGD$
1660   dataa$=DATAD$
1670   DEST_USE "dev8_"  :PROG_USE "dev8_" :DATA_USE "dev8_"
1680   EW dev1_progs_zip;zip$
1690   DEST_USE destt$ :PROG_USE progg$ :DATA_USE dataa$
1700 END DEFine do_zip
1710 :
1720 DATA "dev8_ee_wman_erstr_asm","dev8_ee_wman_data_asm"
1730 DATA "dev8_iod_con2_ptr_wremv_asm"
1740 DATA ""
1750 :
1760 DEFine PROCedure do_copy
1770 LOCal ddr$,lp%,a$ ,f$
1780   ddr$="ram3_"
1790   COPY_O ddr$&smsqe$,"nfa2_new_"&smsqe$
1800   RESTORE 810
1810   REPeat lp%
1820     READ a$
1830     IF a$="":EXIT lp%
1840     COPY_O ddr$&a$&".zip","nfa2_new_"&a$&".zip"
1850   END REPeat lp%
1860   COPY_O ddr$&"qxl.zip","nfa2_new_qxl.zip"
1870   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
1880   COPY_O f$,"nfa2_new_"&"smsqe"&version$&"_binaries.zip"
1890 END DEFine do_copy
1900 :

10 REMark new version : make new version for SMSQE
20 REMark Copyright (C) W. Lenerz
30 REMark the SMSQ/E licence applies
100 p
110 :
120 DEFine PROCedure p
130   make_bins% =1     : REMark 1 to make bin files, 0 if not
140   do_zip%    =1     : REMark 1 to make zip files, 0 if not
150   make_html% =1     : REMark 1 to make html files, 0 if not
160   strt make_binaries%,do_zip%,make_html%
170 END DEFine p
180 :
190 DEFine PROCedure strt (make_binaries%,do_zip%,make_html%)
200   init_vars
210   CLS#ochan%:CLS#ichan%
220   get_current_drive_assignments   : REMark store current drive assignments for later restoration
230   show_info_and_warning
240   CLS#ochan%
250   get_and_show_version
260   make_new_v make_bins%,do_zip%,make_html% : REMark do (all or part of) the work
270   restore_drive_assignments       : REMark reset drives to their original values
280 END DEFine strt
290 :
300 DEFine PROCedure init_vars
310   base_native$=NFA_USE$(1)      : REMark base native dir, which must contain the "website/smsqe" subdir
320   windrv%=4
330   windrive$="win"&windrv%&"_"   : REMark windrive where files will be copied to          "
340   htmldrive$=base_native$&"/website/smsqe/" : REMark drive where html templates and required files are
350   resultnfa$=base_native$&"/website/smsqe/new/": REMark where result files will go
360   all_months$=make_all_months$  : REMark months strings
370   ichan%=2:ochan%=1             : REMark report channels
380   ddr$="ram3_"                  : REMark temp dir
390   qpc%=0                        : REMark not running under QPC
400 END DEFine init_vars
410 :
420 DEFine PROCedure show_info_and_warning
430   PRINT "This program makes a new version of"
440   PRINT "the SMSQ/E source files, ready to "
450   PRINT "upload to the website."
460   PRINT
470   UNDER 1
480   PRINT "READ the manual in the extras_help directory before use."
490   UNDER 0
500   PRINT
510   PRINT "This program makes WIN4_ with the sources,"
520   PRINT "it also makes the zip file conaining all"
530   PRINT "the sources and the zip files for the"
540   PRINT "individual source subdirectories and the."
550   PRINT "binaries. These files are first created"
560   PRINT "in "&ddr$&" and are then copied to:"
570   PRINT "NFA8_"
580   PRINT
590   PRINT "!!!!!"
600   PRINT "NFA7_ will be set to ";htmldrive$;"."
610   PRINT  "Make sure no files are open to this drive"
620   PRINT
630   PRINT "NFA8_ will be set to ";resultnfa$;"."
640   PRINT "ALL FILES CURRENTLY IN NFA8_ WILL BE DELETED!!!!"
650   PRINT
660   PRINT "WIN4_ will be set to "& resultnfa$&"SMSQE"&smsqe$&".win'"
670   PRINT "IF A FILE OF THIS NAME ALREADY EXISTS, IT WILL"
680   PRINT "BE DELETED FIRST!"
690   PRINT "WIN4 IS THEN FORMATTED!"
700   PRINT "!!!!!"
710   PRINT
720   PRINT "'CLINE_BIN' AND 'OUTPTR_BIN' MUST BE LOADED !"
730   PRINT
740   PRINT "This program also temporarily sets the"
750   PRINT "DATA_USE and PROG_USE dirs"
760   PRINT "(it resets them at the end)."
770   PRINT
780   PRINT "----------------------"
790   PRINT
800   PRINT "HIT ENTER TO CONTINUE OR ANY OTHER KEY TO STOP"
810 :
820   a$=INKEY$(-1)
830   IF a$<>CHR$(10):STOP
840 END DEFine show_info_and_warning
850 :
860 DEFine PROCedure get_and_show_version
870   get_smsqe_version ichan%,ochan%
880   smsqename$="smsqe"&smsq_vers$
890   PRINT#ochan%,"-> SMSQE name is : ";smsqename$
900   PRINT#ochan%,"-> SMSQE number is : ";svers$
910 END DEFine get_and_show_version
920 :
930 DEFine PROCedure sa
940   SAVE_O dev8_extras_newversion_bas
950 END DEFine sa
960 :
970 DEFine PROCedure make_new_v (make_binaries%,do_zip%,make_html%)
980 LOCal a$
990   IF NOT IS_EXTN ("current_line")
1000      PRINT "CLINE_bin isn't loaded. Failed and stopped"
1010      STOP
1020   END IF                          : REMark if outptr isn't loaded prog breaks at "is_extn" above
1030   check_native_dirs ichan%,ochan%
1040   check_and_set_win4              : REMark check win4 can be used
1050   CLS#ichan%
1060   IF make_binaries%
1070     INPUT #ochan%,"Compile everything and recreate binaries first? (y/n) ";a$
1080     IF a$=="y"
1090       PRINT "Compiling and creating binaries...."
1100       EW dev8_extras_exe_SMSQEmake;"-q0 -as -mk -ta -sa"
1110      END IF
1120     PRINT #ochan%,"Making Q68 win container..."
1130     make_q68_win ""
1140   END IF
1150   IF do_zip%
1160     IF make_binaries%
1170       zip_binaries  1
1180       PRINT#ochan%,"Zipping all binaries to ";ddr$
1190       wdel_f ddr$,""
1200     END IF
1210     PRINT#ochan%;"Deleting all non source including binaries..."
1220     PRINT#ochan%;"Please be patient..."
1230     EW dev8_extras_del_all_bas;"auto stop"
1240     zip_sources 1
1250     DELETE "nfa8_SMSQE"&svers$&".WIN"
1260     DELETE "NFA8_Q68_SMSQ.WIN"
1270     zip_Win_file
1280     make_container      : REMark Now making the container file with the sources (zip under linux)
1290   END IF
1300   IF make_html%
1310     PRINT#ochan%,"Making html files..."
1320     today$=make_date$(0,0)
1330     make_oldversion_html
1340     make_versions ochan%
1350     make_repl_html "indexphp.template","index.php"
1360     make_repl_html "binaries.template","binaries.html"
1370   END IF
1380   PRINT#ochan%
1390   PRINT#ochan%," ----------------- DONE -----------------"
1400 END DEFine make_new_v
1410 :
1420 DEFine PROCedure get_smsqe_version (ichan%,ochan%)
1430 REMark this gets the version of SMSQE
1440 LOCal chan%,lp%,a$,t%
1450   CLS#ichan%
1460   INPUT#ochan%, "SMSQE version in format x.yy? (or Enter to get it from dev8_smsq_smsq_version_asm) ",smsq_vers$
1470   IF smsq_vers$=""
1480     chan%=FOP_IN('dev8_smsq_smsq_version_asm')
1490     REPeat lp%
1500       IF EOF(#chan%):EXIT lp%
1510       INPUT#chan%,a$
1520       IF "smsq_vers" INSTR a$  AND "equ" INSTR a$
1530         t%="'" INSTR a$
1540         IF t%:smsq_vers$=a$(t%+1 TO t%+4)
1550       END IF
1560     END REPeat lp%
1570     CLOSE#chan%
1580   END IF
1590   IF smsq_vers$=""
1600     PRINT#ochan%, "Failed to get smsq version!"
1610   ELSE
1620     PRINT#ochan%, "-> smsqe version : ",smsq_vers$
1630   END IF
1640   t%='.' INSTR smsq_vers$
1650   IF t%
1660     svers$=smsq_vers$(1)&smsq_vers$(3 TO 4)
1670   ELSE
1680     PRINT "No decimal point in version : wrong! Failed and stopped"
1690     STOP
1700   END IF
1710 END DEFine get_smsqe_version
1720 :
1730 DEFine PROCedure check_and_set_win4
1740 REMark check that the native file corresponding to win4 doesn't exist (!!!)
1750 LOCal a$,t%,natdrv4win4
1760   PRINT#ochan%,"Checking and setting win4_"
1770   natdrv4win4$="nfa8_SMSQE"&svers$&'.WIN'
1780   DELETE natdrv4win4$
1790   t%=FTEST(natdrv4win4$)
1800   IF t%<>-7
1810     CLS:PRINT "Error with win4"
1820     IF t%=0
1830       PRINT "It already exists"
1840     ELSE
1850       REPORT#1,t%
1860     END IF
1870     PRINT "WIN4 check failed - program stopped"
1880     STOP
1890   END IF
1900   WIN_DRIVE 4,NFA_USE$(8)&"SMSQE"&svers$&".WIN"
1910   PRINT#ochan%, "Win4 is: ";WIN_USE$(4)
1920 END DEFine check_and_set_win4
1930 :
1940 DEFine PROCedure check_native_dirs (ichan%,ochan%)
1950 LOCal lp%,t%,drive$
1960   PRINT #ochan%,"Setting NFA7_ and NFA8_"
1970   NFA_USE 7,htmldrive$
1980   t%= FTEST ("nfa7_")
1990   SELect ON t%
2000     =-1:PRINT#ochan%;htmldrive$;" is not a valid directory"
2010         PRINT#ochan%,'There seems to be a simple file with that name already!'
2020         PRINT#ochan%,"Failed and stopped":STOP
2030     =-7:
2040         PRINT "Cannot find ";htmldrive$
2050         PRINT#ochan%,"Failed and stopped":STOP
2060     =0:
2070     = REMAINDER
2080         PRINT "Error for ";htmldrive$;" : ";t%;" - STOPPED":STOP
2090   END SELect
2100   NFA_USE 8,resultnfa$
2110   t%= FTEST ("nfa8_")
2120   SELect ON t%
2130     =0 :PRINT#ochan%,"Deleting all files on nfa8_":wdel_f "nfa8_",""
2140     =-1:PRINT#ochan%;"Couldn't make directory '"&resultnfa$
2150         PRINT#ochan%,'There seems to be a simple file with that name already!'
2160         PRINT#ochan%,"Failed and progam is stopped":STOP
2170     =-7:
2180         MAKE_DIR "nfa8_"
2190     = REMAINDER
2200         PRINT "Error for ";resultnfa$;" : ";t%;" - STOPPED":STOP
2210   END SELect
2220   t%= FTEST ("nfa8_html_")
2230   SELect ON t%
2240     =0 :PRINT#ochan%,"Deleting all files on nfa8_html_":wdel_f "nfa8_html_",""
2250     =-1:PRINT#ochan%;"Couldn't make directory nfa8_html_"
2260         PRINT#ochan%,'There seems to be a simple file with that name already!'
2270         PRINT#ochan%,"Failed and progam is stopped":STOP
2280     =-7:
2290         MAKE_DIR "nfa8_html_"
2300     = REMAINDER
2310         PRINT "Error for ";resultnfa$;" : ";t%;" - STOPPED":STOP
2320   END SELect
2330   PRINT#ochan%,"NFA7_ is: ";NFA_USE$(7)
2340   PRINT#ochan%,"NFA8_ is: ";NFA_USE$(8)
2350 END DEFine check_native_dirs
2360 :
2370 DEFine PROCedure make_q68_win (extn$)
2380 LOCal mblen,c%,fleng,mdir$,olddir$
2390 :
2400   olddir$=WIN_DRIVE$(windrv%)
2410   WIN_DRIVE windrv%,""
2420   COPY_O "nfa7_1MB.win","nfa8_Q68_SMSQ.WIN" : REMark make copy of empty template file, set it as winX
2430   mdir$=NFA_USE$(8)
2440   WIN_DRIVE windrv%,mdir$&"Q68_SMSQ.WIN"    : REMark use as win drive
2450 :                                       : REMark copy Q68 smqe file to it
2460   PAUSE 50
2470   IF extn$<>"":COPY_O "dev1_progs_MenuConf_INF_"&extn$,"dev1_progs_MenuConf_INF"
2480   EW menuconfig;"\q\uDEV8_smsq_q68_SMSQ_4_WIN" : REMark set config
2490   COPY_O "DEV8_smsq_q68_SMSQ_4_WIN","win"&windrv%&"_Q68_SMSQ"
2500   MAKE_DIR "win"&windrv%&"_config"
2510   COPY DEV1_booty_Menu_rext_8e04,"win"&windrv%&"_config_menu_rext_english"
2520   COPY DEV1_progs_MenuConfig,"win"&windrv%&"_config_MenuConfig"
2530   COPY DEV1_q68_boot,"win"&windrv%&"_boot"
2540 :
2550   WIN_DRIVE windrv%,olddir$                   : REMark win drive X no longer exists
2560   IF extn$<>""
2570     COPY_O "dev1_progs_MenuConf_INF_mine","dev1_progs_MenuConf_INF"
2580   END IF
2590 :
2600   REMark PRINT "Created Q68 WIN file"
2610 :
2620 END DEFine make_q68_win
2630 :
2640 DEFine PROCedure make_versions (ochan%)
2650   PRINT#ochan%,"Making changes html text"
2660   EW dev8_extras_html_changes_bas;today$&" quit"
2670   PRINT#ochan%,"Making versions html text"
2680   EW dev8_extras_html_versions_bas;today$&" quit"
2690 END DEFine make_versions
2700 :
2710 DEFine PROCedure make_repl_html (infile$,outfile$)
2720 LOCal lp%,c%,o%,a$
2730   PRINT#ochan%,"Making "&outfile$&" file"
2740   c%=FOP_IN ("nfa7_"&infile$)
2750   IF c%<0:PRINT#ochan%, "failed to open input : ";c%;". STOPPED":STOP
2760   o%=FOP_OVER ("nfa8_html_"&outfile$)
2770   IF o%<0:PRINT#ochan%, "failed to open output - STOPPED":STOP
2780   REPeat lp%
2790     IF EOF(#c%):EXIT lp%
2800     INPUT#c%,a$
2810     a$=repl$(a$)
2820     a$=repl$(a$)                : REMark yes, run this twice
2830     PRINT#o%,a$
2840   END REPeat lp%
2850   CLOSE#c%:CLOSE#o%
2860 END DEFine make_repl_html
2870 :
2880 DEFine FuNction repl$(a$)
2890 REMark replace values in strings
2900 REMark xxxversionxxx is,eg 3.14
2910 REMark xxxsmsqexxx is, eg 314/smsqe314
2920 REMark xxxsubdirxxx is, eg 314/
2930 REMark xxxdatexxx is, eg. 28.02.2017
2940 REMark xxxsversxxx is, eg 314
2950 REMark
2960 REMark  smsq_vers$=eg 3.14
2970 REMark  svers$= eg 314
2980 LOCal t%,front$,end$
2990   front$=a$
3000   t%="xxxversionxxx" INSTR front$
3010   IF t%
3020     front$=front$(1 TO t%-1)&smsq_vers$&front$(t%+13 TO)
3030   END IF
3040   t%="xxxsmsqexxx" INSTR front$
3050   IF t%
3060     front$=front$(1 TO t%-1)&svers$&"/smsqe"&svers$&front$(t%+11 TO)
3070   END IF
3080   t%="xxxsubdirxxx" INSTR front$
3090   IF t%
3100     front$=front$(1 TO t%-1)&svers$&"/"&front$(t%+12 TO)
3110   END IF
3120   t%="xxxdatexxx" INSTR front$
3130   IF t%
3140     front$=front$(1 TO t%-1)&today$&front$(t%+10 TO)
3150   END IF
3160   t%="xxxsversxxx" INSTR front$
3170   IF t%
3180     front$=front$(1 TO t%-1)&svers$&front$(t%+11 TO)
3190   END IF
3200   RETurn front$
3210 END DEFine repl$
3220 :
3230 DEFine PROCedure make_container
3240 REMark this formats the win container
3250 LOCal what_chan%,counter
3260   PRINT#ochan%,"Now making the container file--------"
3270   PRINT#ochan%,"Formatting "&windrive$& " !"
3280   FORMAT windrive$&"25_SMSQE"&smsq_vers$
3290   PRINT#ochan%
3300   counter=0
3310   what_chan%=FOP_OVER('ram1_mydirs')
3320   get_dir_structure "dev8_",what_chan%
3330   CLOSE#what_chan%
3340   PRINT#ochan%,"Got dir structure, sorting..."
3350   sort_it
3360   PRINT#ochan%,"Making dir structure"
3370   make_dir_structure "ram1_mydirs2",windrive$
3380   PRINT#ochan%,"copying files, be patient..."
3390   fbackup "dev8_",windrive$
3400 END DEFine make_container
3410 :
3420 DEFine PROCedure get_dir_structure (dirr$,what_chan%)
3430 LOCal a$,lp,chan%,device$,file$
3440 LOCal k
3450   file$="ram1_ddir"&counter&"pkk"
3460   chan%=FOP_OVER(file$)
3470   IF chan%<0:RETurn
3480   DIR#chan%,dirr$
3490   CLOSE#chan%
3500   device$=dirr$(1 TO 4)&'_'
3510   chan%=FOP_IN(file$)
3520   IF chan%<0:RETurn
3530   INPUT#chan%,a$
3540   INPUT#chan%,a$
3550   REPeat lp
3560     IF EOF(#chan%):EXIT lp
3570     INPUT#chan%,a$
3580     k=LEN(a$)
3590     IF k<4:NEXT lp:EXIT lp
3600     IF a$(k-2 TO k)=' ->'
3610       counter=counter+1
3620       PRINT#what_chan%,a$(1 TO k-3)
3630       a$=device$&a$(1 TO k-3)&"_"
3640       PRINT#ochan%, "OK: ";a$
3650       get_dir_structure a$,what_chan%
3660     END IF
3670   END REPeat lp
3680   CLOSE#chan%
3690   DELETE file$
3700 END DEFine get_dir_structure
3710 :
3720 DEFine PROCedure sort_it
3730 LOCal a$,array$(counter+10,30),chan%,c,lp
3740   chan%=FOP_IN('ram1_mydirs')
3750   c=1
3760   REPeat lp
3770     IF EOF(#chan%):EXIT lp
3780     INPUT#chan%,a$
3790     array$(c)=a$
3800     c=c+1
3810   END REPeat lp
3820   ASORT array$,0
3830   CLOSE#chan%
3840   chan%=FOP_OVER('ram1_mydirs2')
3850   FOR lp=1 TO c
3860     a$=array$(lp)
3870     PRINT#chan%,a$
3880   END FOR lp
3890   CLOSE#chan%
3900 END DEFine sort_it
3910 :
3920 DEFine PROCedure make_dir_structure (file$,drive$)
3930 LOCal lp%,a$,chan%
3940   chan%=FOP_IN(file$)
3950   PRINT#ichan%, file$,chan%
3960   IF chan%<0: PRINT "File "&file$&" doesn't exist":RETurn
3970   REPeat lp%
3980     IF EOF(#chan%):EXIT lp%
3990     INPUT#chan%,a$
4000     IF a$="":NEXT lp%:EXIT lp%
4010     PRINT#ichan%, "Making "&drive$&a$&" ..."
4020     MAKE_DIR drive$&a$
4030   END REPeat lp%
4040   CLOSE#chan%
4050 END DEFine make_dir_structure
4060 :
4070 DEFine PROCedure fbackup (source$,dest$)
4080 REMark makes a forced backup, eventually deleting newer files on dest
4090 REMark and replacing them with the files on source$
4100 REMark fbackup "dir_with_new_files", "dir_with_old_files"
4110 LOCal chan%,lp%,myfile$,a$,t%,tc%,len_old,len_new,date_old,date_new,b$,mdir$,mdest$
4120   FOR lp%=1 TO 50
4130     myfile$="ram8_diffs_txt"&RND(1 TO 80)&RND (1 TO 80) & RND (1 TO 50)
4140     chan%=FOP_NEW (myfile$)            : REMark try to open unique file
4150     IF chan%>0:EXIT lp%
4160   END FOR lp%
4170   IF source$(LEN(source$))<>"_":source$=source$&"_"
4180   IF dest$(LEN(dest$))<>"_":dest$=dest$&"_"
4190   PRINT#ichan%, 'source= ';source$
4200   PRINT#ichan%, "dest= ";dest$
4210   mdir$=source$(1 TO 5)
4220   mdest$=dest$(1 TO 5)
4230   IF chan%<0:RETurn                     : REMark ooops!!!!
4240   WDIR#chan%,source$                    : REMark dir of this rep in file
4250   GET#chan%\0                           : REMark reset file pointer to start
4260   REPeat lp%
4270     IF EOF(#chan%):EXIT lp%
4280     INPUT#chan%,a$                      : REMark get filename
4290     IF a$="":NEXT lp%
4300     t%= ' ->' INSTR a$                  : REMark is it a subdir?
4310     IF t%
4320       tc%=LEN(source$)-4
4330       c$=a$(tc% TO)
4340       c$=c$(TO LEN(c$)-3)&"_"
4350       fbackup mdir$&a$(TO LEN(a$)-3)&'_',dest$&c$
4360       NEXT lp%
4370     END IF
4380     tc%=FOP_IN(mdir$&a$)                : REMark open source file
4390     date_old=FUPDT(#tc%)                : REMark file date of "old" source file
4400     CLOSE#tc%
4410     tc%=LEN(source$)-4                  : REMark length of name w/o subdirectory
4420     b$=a$(tc% TO)
4430     DELETE dest$&b$
4440     COPY mdir$&a$,dest$&b$
4450     tc%=FOPEN(dest$&b$)
4460     SET_FUPDT#tc%,date_old
4470     CLOSE#tc%
4480   END REPeat lp%
4490   CLOSE#chan%
4500   DELETE myfile$
4510 END DEFine fbackup
4520 :
4530 DEFine FuNction make_all_months$
4540 REMark this makes a string "JanFeb..." in the current language
4550 REMark this should be called during the initialisation part
4560 REMark eg. all_months$=make_all_months$ - dates_init below is a handy proc for that
4570 LOCal string$,lp%,a$,temp
4580   string$="":a$="":temp=0
4590   temp=60*60*24*31
4600   FOR lp%=0 TO 11
4610     a$=DATE$(lp%*temp)
4620     string$=string$&a$(6 TO 8)
4630   END FOR lp%
4640   RETurn string$
4650 END DEFine make_all_months$
4660 :
4670 DEFine FuNction make_date$(dflag%,what_date)
4680 REMark returns date as "01.01.1991" (dflag%=1) or "1991.01.31" (dflag%=0)
4690 REMark if what_date<>0, then it is this date that will be returned
4700 REMark this presumes that a variable "all_month$" exists!
4710   LOCal a$,b$,res
4720   b$=""
4730   IF what_date
4740     a$=DATE$(what_date)         : REMark make date passed as param into string
4750   ELSE
4760     a$=DATE$                    : REMark current date into string
4770   END IF
4780   b$=a$(6 TO 8)                 : REMark 3 letter month abbreviation
4790   res= b$ INSTR all_months$             : REMark find it
4800   IF NOT res
4810        all_months$=make_all_months$     : REMark not found?, make all_month$
4820        res= b$ INSTR all_months$        : REMark and retry
4830   END IF
4840   res=(res+2)/3                 : REMark this is the month in figures
4850   b$=res:IF res<10:b$="0"&b$            : REMark add leading 0 if necessary
4860   IF dflag%:RETurn a$(10 TO 11)&"."&b$&"."&a$(1 TO 4)
4870   RETurn a$(1 TO 4)&"."&b$&"."&a$(10 TO 11)
4880 END DEFine make_date$
4890 :
4900 REMark ------------- zipping --------------
4910 :
4920 DEFine PROCedure zip_sources (docopy%)
4930   del_zips
4940   zip_all_sources_into_one_file
4950   zip_individual_source_dirs
4960   IF docopy%:  fbackup "ram3_","nfa8_"
4970   del_zips
4980 END DEFine zip_sources
4990 :
5000 DEFine PROCedure zip_all_sources_into_one_file
5010 REMark This zips the entire SMSQE sources into one zip file.
5020 REMark Ensure that all non source files have been erased first!
5030 LOCal zip$
5040   PRINT#ochan%, "Zipping all sources into one zip file... "
5050   do_zip " -Q4r9 "&ddr$&"smsqe"&svers$&".zip"&" dd_* dv3_* ee_* extras_* iod_* keys_* lang_* mac_* minerva_* sbsext_* smsq_* sys_* uti_* util_* nfa1_qxl_* changes_txt readme_txt styleguide_txt whats_new_txt licence_doc licence_txt "
5060 END DEFine zip_all_sources_into_one_file
5070 :
5080 DEFine PROCedure zip_Win_file
5090   PRINT#ochan%, "Zipping the win file..."
5100   do_zip " -Q4r9 nfa8_smsqe"&svers$&"src.win nfa8_SMSQE"&svers$&".WIN"
5110 END DEFine zip_Win_file
5120 :
5130 DEFine PROCedure zip_individual_source_dirs
5140 LOCal lp%,dirname$
5150   RESTORE CURRENT_LINE : REMark make sure no other DATA statement is between this proc anf the "del_zips" proc
5160   PRINT#ochan%,"Zipping individual source dirs..."
5170   REPeat lp%
5180     READ dirname$
5190     IF dirname$="":EXIT lp%
5200     PRINT#ichan%, "Zipping "&dirname$
5210     do_zip " -Q4r9 "&ddr$&dirname$&".zip "&dirname$&"_*"
5220   END REPeat lp%
5230   do_qxl_pc
5240   DATA "dd","dv3","ee","extras","iod","keys","lang","mac","minerva","sbsext","smsq","sys","uti","util"
5250   DATA ""
5260 END DEFine zip_individual_source_dirs
5270 :
5280 DEFine PROCedure do_qxl_pc
5290 LOCal a$
5300   a$="nfa1_qxl_*"
5310   PRINT#ichan%, "Zipping qxl..."
5320   do_zip " -Q4j9 "&ddr$&"qxl.zip "& a$
5330 END DEFine do_qxl_pc
5340 :
5350 DEFine PROCedure del_zips
5360 REMark delete all zips on ddr$
5370 LOCal extns(0)
5380   DIM extns$(1,3)
5390   extns$(1)="zip"
5400   wdel_f ddr$,extns$
5410 END DEFine del_zips
5420 :
5430 DEFine PROCedure s
5440 REMark this resets the data etc dirs to acceptable values, no longer used
5450   DEST_USE dev1_
5460   DATA_USE dev1_basic_
5470   PROG_USE dev1_progs_
5480 END DEFine s
5490 :
5500 DEFine PROCedure zip_binaries (do_delete%)
5510 REMark This zips all binary versions and then possibly deletes them.
5520 REMark They are zipped into one big file and into individual files
5530   LOCal nbr%,lp%,source$,dest$,zip$,f$,zp$
5540   f$ =ddr$&"smsqe"&svers$&"_binaries.zip"
5550   REMark first of all, all into one
5560   PRINT#ochan%, "Zipping binaries into one file..."
5570   zip$ =' -Q4j9 '&f$&' '
5580   RESTORE CURRENT_LINE
5590   REPeat lp%
5600     READ source$,dest$
5610     IF source$="":EXIT lp%
5620     PRINT#ichan%, "copying "& source$
5630     COPY_O source$,ddr$&dest$
5640     zip$=zip$&ddr$&dest$ & ' '
5650   END REPeat lp%
5660   do_zip zip$
5670 :
5680   REMark now zip up each individual file
5690   PRINT#ochan%, "Zipping each binary separately..."
5700   zip$ =' -Q4j9 '
5710   RESTORE CURRENT_LINE
5720   REPeat lp%
5730     READ source$,dest$
5740     IF source$="" OR "_txt" INSTR source$:EXIT lp%
5750     PRINT#ichan%, "copying "& source$
5760     COPY_O source$,ddr$&dest$
5770     zp$=zip$&ddr$&dest$&".zip" &" " & ddr$&dest$
5780     do_zip zp$
5790     IF do_delete% AND NOT ("_txt" INSTR source$): DELETE source$
5800   END REPeat lp%
5810   REMark now delete files that aren't zipped
5820   RESTORE CURRENT_LINE
5830   REPeat lp%
5840     READ dest$,dest$
5850     IF dest$="":EXIT lp%
5860     DELETE ddr$&dest$
5870   END REPeat lp%
5880   REMark now copy all remaining files to nfa8_
5890   fbackup ddr$,"nfa8_"
5900   PRINT#ochan%, "Binaries done..."
5910   DATA "dev8_smsq_atari_SMSQ.PRG",  "SMSQE.PRG"       : REMark PRG file for ATARI ST/TT, ready to be used
5920   DATA "dev8_smsq_gold_gold",       "GoldCard_bin"    : REMark gold card Ql colours
5930   DATA "dev8_smsq_gold_gold8",      "GoldCard_256colours_bin"
5940   DATA "dev8_smsq_q40_rom",         "Q40_rom"         : REMark q40/q60 use as rom / lrespr file
5950   DATA "dev8_smsq_qxl_smsqe.exe",   "SMSQEQXL.EXE"    : REMark EXE to be run under DOS on i386 compatible systems with a QXL card installed, ready to be used
5960   DATA "dev8_smsq_aurora_SMSQE",    "Aurora_bin"      : REMark aurora 8 bit
5970   DATA "dev8_smsq_java_java",       "SMSQE"           : REMark Code file for SMSQmulator, ready to be used
5980   DATA "nfa8_Q68_SMSQ.WIN",         "Q68_SMSQ.WIN"    : REMark smsqe for Q68, win drive
5990   DATA "dev8_smsq_qpc_smsqe.bin",   "SMSQE.bin"       : REMark Code file for QPC2, ready to be used
6000   DATA "dev8_smsq_qem_SMSQ_QEM",    "SMSQ_QEM"        : REMark Code file for Q-Emulator, ready to be used
6010   DATA "dev8_ee_ptr_gen",           "ptr_gen"         : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
6020   DATA "dev8_ee_wman_wman",         "wman"            : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
6030   DATA "dev8_ee_hot_rext_english",  "hot_rext_english": REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
6040   DATA "dev8_ee_hot_rext_french",   "hot_rext_french" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
6050   DATA "dev8_ee_hot_rext_german",   "hot_rext_german" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
6060   DATA "dev8_whats_new_txt",        "whats_new_txt"
6070   DATA "dev8_changes_txt",          "changes_txt"
6080   DATA "dev8_readme_txt",           "readme_txt"
6090   DATA "","" : REMark leave TWO empty strings here
6100 END DEFine zip_binaries
6110 :
6120 DEFine PROCedure do_zip (zip$)
6130 LOCal destt$,progg$,dataa$
6140   destt$=DESTD$
6150   progg$=PROGD$
6160   dataa$=DATAD$
6170   DEST_USE "dev8_"  :PROG_USE "dev8_" :DATA_USE "dev8_"
6180   EW dev1_progs_zip;zip$
6190   DEST_USE destt$ :PROG_USE progg$ :DATA_USE dataa$
6200 END DEFine do_zip
6210 :
6220 DEFine PROCedure do_copy
6230 LOCal lp%,a$ ,f$
6240   PAUSE 80
6250   COPY_O ddr$&smsqe$,"nfa2_new_"&smsqe$
6260   RESTORE 1020
6270   REPeat lp%
6280     READ a$
6290     IF a$="":EXIT lp%
6300     COPY_O ddr$&a$&".zip","nfa2_new_"&a$&".zip"
6310   END REPeat lp%
6320   COPY_O ddr$&"qxl.zip","nfa2_new_qxl.zip"
6330   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
6340   COPY_O f$,"nfa2_new_"&"smsqe"&version$&"_binaries.zip"
6350 END DEFine do_copy
6360 :
6370 DEFine PROCedure wdel_f (source$,array_with_extns$)
6380 REMark Delete either all files on dir$, or only all files with any extension
6390 REMark contained in the array_with_extns$ string array. This does NOT recurse
6400 REMark into subdirs.
6410 LOCal lp%,iters%,chan%,myname$,a$,lp2%,dir$
6420   myname$="wdel_f" &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100)
6430   chan%=FOP_OVER("ram1_"&myname$)
6440   IF chan%<0:RETurn             : REMark can't open channel, give up
6450   IF LEN(source$)>5
6460     dir$=source$(1 TO 5)
6470   ELSE
6480     dir$=source$
6490   END IF
6500   DIR#chan%,source$
6510   GET#chan%\0
6520   INPUT#chan%,a$
6530   INPUT#chan%,a$
6540   iters%=DIMN(array_with_extns$,1)
6550   IF iters%=0
6560                                     : REMark no extension - delete everything
6570     REPeat lp%
6580       IF EOF(#chan%):EXIT lp%
6590       INPUT#chan%,a$
6600       IF a$==myname$ OR a$="":NEXT lp%
6610       IF endswith% (" ->",a$): NEXT lp%: REMark don't go into subdirs
6620       DELETE dir$&a$
6630     END REPeat lp%
6640   ELSE
6650                                   : REMark only delete files with matching extension
6660     REPeat lp%
6670       IF EOF(#chan%):EXIT lp%
6680       INPUT#chan%,a$
6690       IF a$==myname$ OR a$="":NEXT lp%
6700       FOR lp2%=0 TO iters%
6710         IF endswith% (array_with_extns$(lp2%),a$)
6720           DELETE dir$&a$
6730           EXIT lp2%
6740         END IF
6750       END FOR lp2%
6760     END REPeat lp%
6770   END IF
6780   CLOSE#chan%
6790   DELETE "ram1_"&myname$
6800 END DEFine wdel_f
6810 :
6820 DEFine FuNction endswith%(extension$,name$)
6830 REMark checks whether name$ ends with extension$. Returns 1 if yes, 0 if not. If
6840 REMark either of the params is "", returns 0.
6850 LOCal elen%,nlen%
6860   IF extension$="" OR name$="":RETurn 0
6870   elen%=LEN(extension$)
6880   nlen%=LEN(name$)
6890   IF elen%>nlen%:RETurn 0
6900   IF name$(nlen%-elen%+1 TO)== extension$: RETurn 1
6910   RETurn 0
6920 END DEFine endswith%
6930 :
6940 DEFine PROCedure w
6950 LOCal extns(0)
6960   DIM extns$(1,3)
6970   extns$(1)="asm"
6980   wdel_f "ram3_",extns$
6990 END DEFine w
7000 :
7010 DEFine PROCedure get_current_drive_assignments
7020   current_nfa7$=NFA_USE$(7)
7030   current_nfa8$=NFA_USE$(8)
7040   current_win4$=WIN_DRIVE$(windrv%)
7050 END DEFine get_current_drive_assignment
7060 :
7070 DEFine PROCedure restore_drive_assignments
7080   NFA_USE 7,current_nfa7$
7090   NFA_USE 8,current_nfa8$
7100   WIN_DRIVE windrv%,current_win4$
7110 END DEFine restore_drive_assignments
7120 :
7130 DEFine PROCedure make_oldversion_html
7140 LOCal c%,o%,a$,lp%,versn,versn$
7150   PRINT#ochan%, "Making oldversions html"
7160   c%=FOP_IN("nfa7_oldversions.html")
7170   IF c%<0:PRINT#ochan%, "failed to open input : ";c%;". STOPPED":STOP
7180   o%=FOP_OVER ("nfa8_html_oldversions.html")
7190   IF o%<0:PRINT#ochan%, "failed to open output - STOPPED":STOP
7200   versn=svers$
7210   versn=versn-1
7220   versn$=versn
7230   versn$=versn$(1)&"."&versn$(2 TO)
7240   REPeat lp%
7250     IF EOF(#c%):EXIT lp%
7260     INPUT#c%,a$
7270     IF "</ul>" INSTR a$
7280        PRINT#o%,'     <li> <a href = "old/smsqe'&versn&'src.win.zip">SMSQ/E v. '&versn$&'</a></li>'
7290      END IF
7300      PRINT#o%,a$
7310    END REPeat lp%
7320    CLOSE#c%
7330    CLOSE#o%
7340 REMark   copy_o "nfa8_html_oldversions.html","nfa7_oldversions.html"
7350 END DEFine make_oldversion_html
7360 :
7370 DEFine PROCedure r
7380   restore_drive_assignments       : REMark reset drives to their original values
7390 END DEFine r

100 CLS#1:CLS#2
110 init_vars
120 PRINT resultnfa$
130 get_current_drive_assignments   : REMark store current drive assignments for later restoration
140 show_info_and_warning
150 CLS
160 p                               : REMark do the work
170 restore_drive_assignments       : REMark reset drives to their original values
180 :
190 DEFine PROCedure init_vars
200   base_native$=NFA_USE$(1)      : REMark bas native dir, which must contain the "website" subdir
210   windrv%=4
220   windrive$="win"&windrv%&"_" : REMark windrive where files will be copied to          "
230   htmldrive$=base_native$&"website/" : REMark drive where html templates and required files are
240   resultnfa$=base_native$&"website/new/": REMark where result files will go
250   all_months$=make_all_months$  : REMark months strings
260   ichan%=2:ochan%=1             : REMark report channels
270   ddr$="ram3_"                  : REMark temp dir
280   qpc%=0                        : REMark not running under QPC
290 END DEFine init_vars
300 :
310 DEFine PROCedure show_info_and_warning
320   PRINT "This program makes a new version of"
330   PRINT "the SMSQ/E source files, ready to "
340   PRINT "upload to the website."
350   PRINT
360   UNDER 1
370   PRINT "READ the manual in the extras_help directory before use."
380   UNDER 0
390   PRINT
400   PRINT "This program makes WIN4_ with the sources,"
410   PRINT "it also makes the zip file conaining all"
420   PRINT "the sources and the zip files for the"
430   PRINT "individual source subdirectories and the."
440   PRINT "binaries. These files are first created"
450   PRINT "in "&ddr$&" and are then copied to:"
460   PRINT "NFA8_"
470   PRINT
480   PRINT "!!!!!"
490   PRINT "NFA7_ will be set to ";htmldrive$;"."
500   PRINT  "Make sure no files are open to this drive"
510   PRINT
520   PRINT "NFA8_ will be set to ";resultnfa$;"."
530   PRINT "ALL FILES CURRENTLY IN NFA8_ WILL BE DELETED!!!!"
540   PRINT
550   PRINT "WIN4_ will be set to "& resultnfa$&"SMSQE"&smsqe$&".win'"
560   PRINT "IF A FILE OF THIS NAME ALREADY EXISTS, IT WILL"
570   PRINT "BE DELETED FIRST!"
580   PRINT "WIN4 IS THEN FORMATTED!"
590   PRINT "!!!!!"
600   PRINT
610   PRINT "'CLINE_BIN' AND 'OUTPTR_BIN' MUST BE LOADED !"
620   PRINT
630   PRINT "This program also temporarily sets the"
640   PRINT "DATA_USE and PROG_USE dirs"
650   PRINT "(it resets them at the end)."
660   PRINT
670   PRINT "----------------------"
680   PRINT
690   PRINT "HIT ENTER TO CONTINUE OR ANY OTHER KEY TO STOP"
700 :
710   a$=INKEY$(-1)
720   IF a$<>CHR$(10):STOP
730 END DEFine show_info_and_warning
740 :
750 DEFine PROCedure sa
760   SAVE_O dev8_extras_newversion_bas
770 END DEFine sa
780 :
790 DEFine PROCedure p
800 LOCal a$
810   IF NOT IS_EXTN ("current_line")
820      PRINT "CLINE_bin isn't loaded. Failed and stopped"
830      STOP
840   END IF                          : REMark if outptr isn't loaded prog breaks at "is_extn" above
850   get_smsqe_version ichan%,ochan%
860   smsqename$="smsqe"&smsq_vers$
870   PRINT#ochan%,"-> SMSQE name is : ";smsqename$
880   check_native_dirs ichan%,ochan%
890   check_and_set_win4              : REMark check win4 can be used
900   CLS#ichan%
910   INPUT #ochan%,"Compile everything and recreate binaries first? (y/n) ";a$
920   IF a$=="y"
930      PRINT "Compiling and creating binaries...."
940      EW dev8_extras_exe_SMSQEmake;"-q0 -as -mk -ta -sa"
950   END IF
960   PRINT #ochan%,"Making Q68 win container..."
970   make_q68_win ""
980   PRINT#ochan%,"Zipping all binaries to ";ddr$
990   zip_binaries  1
1000   wdel_f ddr$,""
1010   PRINT#ochan%;"Deleting all non source including binaries..."
1020   PRINT#ochan%;"Please be patient..."
1030   EW dev8_extras_del_all_bas;"auto stop"
1040   REMark PRINT#ochan%, "Zipping all source files to ";ddr$
1050   zip_sources 1
1060   DELETE "nfa8_SMSQE"&svers$&".WIN"
1070   DELETE "NFA8_Q68_SMSQ.WIN"
1080   PRINT#ochan%,"Making html files..."
1090   today$=make_date$(0,0)
1100   make_oldversion_html
1110   make_versions ochan%
1120   make_repl_html "indexphp.template","index.php"
1130   make_repl_html "binaries.template","binaries.html"
1140   make_container
1150   zip_Win_file
1160   PRINT#ochan%
1170   PRINT#ochan%," ----------------- DONE -----------------"
1180 END DEFine p
1190 :
1200 DEFine PROCedure get_smsqe_version (ichan%,ochan%)
1210 REMark this gets the version of SMSQE
1220 LOCal chan%,lp%,a$,t%
1230   CLS#ichan%
1240   INPUT#ochan%, "SMSQE version in format x.yy? (or Enter to get it from dev8_smsq_smsq_version_asm) ",smsq_vers$
1250   IF smsq_vers$=""
1260     chan%=FOP_IN('dev8_smsq_smsq_version_asm')
1270     REPeat lp%
1280       IF EOF(#chan%):EXIT lp%
1290       INPUT#chan%,a$
1300       IF "smsq_vers" INSTR a$  AND "equ" INSTR a$
1310         t%="'" INSTR a$
1320         IF t%:smsq_vers$=a$(t%+1 TO t%+4)
1330       END IF
1340     END REPeat lp%
1350     CLOSE#chan%
1360   END IF
1370   IF smsq_vers$=""
1380     PRINT#ochan%, "Failed to get smsq version!"
1390   ELSE
1400     PRINT#ochan%, "-> smsqe version : ",smsq_vers$
1410   END IF
1420   t%='.' INSTR smsq_vers$
1430   IF t%
1440     svers$=smsq_vers$(1)&smsq_vers$(3 TO 4)
1450   ELSE
1460     PRINT "No decimal point in version : wrong! Failed and stopped"
1470     STOP
1480   END IF
1490 END DEFine get_smsqe_version
1500 :
1510 DEFine PROCedure check_and_set_win4
1520 REMark check that the native file corresponding to win4 doesn't exist (!!!)
1530 LOCal a$,t%,natdrv4win4
1540   PRINT#ochan%,"Checking and setting win4_"
1550   natdrv4win4$="nfa8_SMSQE"&svers$&'.WIN'
1560   DELETE natdrv4win4$
1570   t%=FTEST(natdrv4win4$)
1580   IF t%<>-7
1590     CLS:PRINT "Error with win4"
1600     IF t%=0
1610       PRINT "It already exists"
1620     ELSE
1630       REPORT#1,t%
1640     END IF
1650     PRINT "WIN4 check failed - program stopped"
1660     STOP
1670   END IF
1680   WIN_DRIVE 4,NFA_USE$(8)&"SMSQE"&svers$&".WIN"
1690   PRINT#ochan%, "Win4 is: ";NFA_USE$(8)&"SMSQE"&svers$&".WIN"
1700 END DEFine check_and_set_win4
1710 :
1720 DEFine PROCedure check_native_dirs (ichan%,ochan%)
1730 LOCal lp%,t%,drive$
1740   PRINT #ochan%,"Setting NFA7_ and NFA8_"
1750   NFA_USE 7,htmldrive$
1760   t%= FTEST ("nfa7_")
1770   SELect ON t%
1780     =-1:PRINT#ochan%;htmldrive$;" is not a valid directory"
1790         PRINT#ochan%,'There seems to be a simple file with that name already!'
1800         PRINT#ochan%,"Failed and stopped":STOP
1810     =-7:
1820         PRINT "Cannot find ";htmldrive$
1830         PRINT#ochan%,"Failed and stopped":STOP
1840     =0:
1850     = REMAINDER
1860         PRINT "Error for ";htmldrive$;" : ";t%;" - STOPPED":STOP
1870   END SELect
1880   NFA_USE 8,resultnfa$
1890   t%= FTEST ("nfa8_")
1900   SELect ON t%
1910     =0 :PRINT#ochan%,"Deleting all files on nfa8_":wdel_f "nfa8_",""
1920     =-1:PRINT#ochan%;"Couldn't make directory '"&resultnfa$
1930         PRINT#ochan%,'There seems to be a simple file with that name already!'
1940         PRINT#ochan%,"Failed and progam is stopped":STOP
1950     =-7:
1960         MAKE_DIR "nfa8_"
1970     = REMAINDER
1980         PRINT "Error for ";resultnfa$;" : ";t%;" - STOPPED":STOP
1990   END SELect
2000   t%= FTEST ("nfa8_html_")
2010   SELect ON t%
2020     =0 :PRINT#ochan%,"Deleting all files on nfa8_html_":wdel_f "nfa8_html_",""
2030     =-1:PRINT#ochan%;"Couldn't make directory nfa8_html_"
2040         PRINT#ochan%,'There seems to be a simple file with that name already!'
2050         PRINT#ochan%,"Failed and progam is stopped":STOP
2060     =-7:
2070         MAKE_DIR "nfa8_html_"
2080     = REMAINDER
2090         PRINT "Error for ";resultnfa$;" : ";t%;" - STOPPED":STOP
2100   END SELect
2110   PRINT#ochan%,"NFA7_ is: ";NFA_USE$(7)
2120   PRINT#ochan%,"NFA8_ is: ";NFA_USE$(8)
2130 END DEFine check_native_dirs
2140 :
2150 DEFine PROCedure make_q68_win (extn$)
2160 LOCal mblen,c%,fleng,mdir$,olddir$
2170 :
2180   olddir$=WIN_DRIVE$(windrv%)
2190   WIN_DRIVE windrv%,""
2200   COPY_O "nfa7_1MB.win","nfa8_Q68_SMSQ.WIN" : REMark make copy of empty template file, set it as winX
2210   mdir$=NFA_USE$(8)
2220   WIN_DRIVE windrv%,mdir$&"Q68_SMSQ.WIN"    : REMark use as win drive
2230 :                                       : REMark copy Q68 smqe file to it
2240   PAUSE 50
2250   IF extn$<>"":COPY_O "dev1_progs_MenuConf_INF_"&extn$,"dev1_progs_MenuConf_INF"
2260   EW menuconfig;"\q\uDEV8_smsq_q68_QL_RAM.BIN" : REMark set config
2270   COPY_O "DEV8_smsq_q68_QL_RAM.BIN","win"&windrv%&"_Q68_SMSQ"
2280   MAKE_DIR "win"&windrv%&"_config"
2290   COPY DEV1_booty_Menu_rext_8e04,"win"&windrv%&"_config_menu_rext_english"
2300   COPY DEV1_progs_MenuConfig,"win"&windrv%&"_config_MenuConfig"
2310   COPY DEV1_q68_boot,"win"&windrv%&"_boot"
2320 :
2330   WIN_DRIVE windrv%,olddir$                   : REMark win drive X no longer exists
2340   IF extn$<>""
2350     COPY_O "dev1_progs_MenuConf_INF_mine","dev1_progs_MenuConf_INF"
2360   END IF
2370 :
2380   REMark PRINT "Created Q68 WIN file"
2390 :
2400 END DEFine make_q68_win
2410 :
2420 DEFine PROCedure make_versions (ochan%)
2430   PRINT#ochan%,"Making changes html text"
2440   EW dev8_extras_html_changes_bas;today$&" quit"
2450   PRINT#ochan%,"Making versions html text"
2460   EW dev8_extras_html_versions_bas;today$&" quit"
2470 END DEFine make_versions
2480 :
2490 DEFine PROCedure make_repl_html (infile$,outfile$)
2500 LOCal lp%,c%,o%,a$
2510   PRINT#ochan%,"Making "&outfile$&" file"
2520   c%=FOP_IN ("nfa7_"&infile$)
2530   IF c%<0:PRINT#ochan%, "failed to open input : ";c%;". STOPPED":STOP
2540   o%=FOP_OVER ("nfa8_html_"&outfile$)
2550   IF o%<0:PRINT#ochan%, "failed to open output - STOPPED":STOP
2560   REPeat lp%
2570     IF EOF(#c%):EXIT lp%
2580     INPUT#c%,a$
2590     a$=repl$(a$)
2600     PRINT#o%,a$
2610   END REPeat lp%
2620   CLOSE#c%:CLOSE#o%
2630 END DEFine make_repl_html
2640 :
2650 DEFine FuNction repl$(a$)
2660 REMark replace values in strings
2670 REMark xxxversionxxx is,eg 3.14
2680 REMark xxxsmsqexxx is, eg 314/smsqe314
2690 REMark xxxsubdirxxx is, eg 314/
2700 REMark xxxdatexxx is, eg. 28.02.2017
2710 REMark
2720 REMark  smsq_vers$=eg 3.14
2730 REMark  svers$= eg 314
2740 LOCal t%,front$,end$
2750   front$=a$
2760   t%="xxxversionxxx" INSTR front$
2770   IF t%
2780     front$=front$(1 TO t%-1)&smsq_vers$&front$(t%+13 TO)
2790   END IF
2800   t%="xxxsmsqexxx" INSTR front$
2810   IF t%
2820     front$=front$(1 TO t%-1)&svers$&"/smsqe"&svers$&front$(t%+11 TO)
2830   END IF
2840   t%="xxxsubdirxxx" INSTR front$
2850   IF t%
2860     front$=front$(1 TO t%-1)&svers$&"/"&front$(t%+12 TO)
2870   END IF
2880   t%="xxxdatexxx" INSTR front$
2890   IF t%
2900     front$=front$(1 TO t%-1)&today$&front$(t%+10 TO)
2910   END IF
2920   RETurn front$
2930 END DEFine repl$
2940 :
2950 DEFine PROCedure make_container
2960 REMark this formats the win container
2970 LOCal what_chan%,counter
2980   PRINT#ochan%,"Now making the container file--------"
2990   PRINT#ochan%,"Formatting "&windrive$& " !"
3000   FORMAT windrive$&"25_SMSQE"&smsq_vers$
3010   PRINT#ochan%
3020   counter=0
3030   what_chan%=FOP_OVER('ram1_mydirs')
3040   get_dir_structure "dev8_",what_chan%
3050   CLOSE#what_chan%
3060   PRINT#ochan%,"Got dir structure, sorting..."
3070   sort_it
3080   PRINT#ochan%,"Making dir structure"
3090   make_dir_structure "ram1_mydirs2",windrive$
3100   PRINT#ochan%,"copying files, be patient..."
3110   fbackup "dev8_",windrive$
3120 END DEFine make_container
3130 :
3140 DEFine PROCedure get_dir_structure (dirr$,what_chan%)
3150 LOCal a$,lp,chan%,device$,file$
3160 LOCal k
3170   file$="ram1_ddir"&counter&"pkk"
3180   chan%=FOP_OVER(file$)
3190   IF chan%<0:RETurn
3200   DIR#chan%,dirr$
3210   CLOSE#chan%
3220   device$=dirr$(1 TO 4)&'_'
3230   chan%=FOP_IN(file$)
3240   IF chan%<0:RETurn
3250   INPUT#chan%,a$
3260   INPUT#chan%,a$
3270   REPeat lp
3280     IF EOF(#chan%):EXIT lp
3290     INPUT#chan%,a$
3300     k=LEN(a$)
3310     IF k<4:NEXT lp:EXIT lp
3320     IF a$(k-2 TO k)=' ->'
3330       counter=counter+1
3340       PRINT#what_chan%,a$(1 TO k-3)
3350       a$=device$&a$(1 TO k-3)&"_"
3360       PRINT#ochan%, "OK: ";a$
3370       get_dir_structure a$,what_chan%
3380     END IF
3390   END REPeat lp
3400   CLOSE#chan%
3410   DELETE file$
3420 END DEFine get_dir_structure
3430 :
3440 DEFine PROCedure sort_it
3450 LOCal a$,array$(counter+10,30),chan%,c,lp
3460   chan%=FOP_IN('ram1_mydirs')
3470   c=1
3480   REPeat lp
3490     IF EOF(#chan%):EXIT lp
3500     INPUT#chan%,a$
3510     array$(c)=a$
3520     c=c+1
3530   END REPeat lp
3540   ASORT array$,0
3550   CLOSE#chan%
3560   chan%=FOP_OVER('ram1_mydirs2')
3570   FOR lp=1 TO c
3580     a$=array$(lp)
3590     PRINT#chan%,a$
3600   END FOR lp
3610   CLOSE#chan%
3620 END DEFine sort_it
3630 :
3640 DEFine PROCedure make_dir_structure (file$,drive$)
3650 LOCal lp%,a$,chan%
3660   chan%=FOP_IN(file$)
3670   PRINT#ichan%, file$,chan%
3680   IF chan%<0: PRINT "File "&file$&" doesn't exist":RETurn
3690   REPeat lp%
3700     IF EOF(#chan%):EXIT lp%
3710     INPUT#chan%,a$
3720     IF a$="":NEXT lp%:EXIT lp%
3730     PRINT#ichan%, "Making "&drive$&a$&" ..."
3740     MAKE_DIR drive$&a$
3750   END REPeat lp%
3760   CLOSE#chan%
3770 END DEFine make_dir_structure
3780 :
3790 DEFine PROCedure fbackup (source$,dest$)
3800 REMark makes a forced backup, eventually deleting newer files on dest
3810 REMark and replacing them with the files on source$
3820 REMark fbackup "dir_with_new_files", "dir_with_old_files"
3830 LOCal chan%,lp%,myfile$,a$,t%,tc%,len_old,len_new,date_old,date_new,b$,mdir$,mdest$
3840   FOR lp%=1 TO 50
3850     myfile$="ram8_diffs_txt"&RND(1 TO 80)&RND (1 TO 80) & RND (1 TO 50)
3860     chan%=FOP_NEW (myfile$)            : REMark try to open unique file
3870     IF chan%>0:EXIT lp%
3880   END FOR lp%
3890   IF source$(LEN(source$))<>"_":source$=source$&"_"
3900   IF dest$(LEN(dest$))<>"_":dest$=dest$&"_"
3910   PRINT#ichan%, 'source= ';source$
3920   PRINT#ichan%, "dest= ";dest$
3930   mdir$=source$(1 TO 5)
3940   mdest$=dest$(1 TO 5)
3950   IF chan%<0:RETurn                     : REMark ooops!!!!
3960   WDIR#chan%,source$                    : REMark dir of this rep in file
3970   GET#chan%\0                           : REMark reset file pointer to start
3980   REPeat lp%
3990     IF EOF(#chan%):EXIT lp%
4000     INPUT#chan%,a$                      : REMark get filename
4010     IF a$="":NEXT lp%
4020     t%= ' ->' INSTR a$                  : REMark is it a subdir?
4030     IF t%
4040       tc%=LEN(source$)-4
4050       c$=a$(tc% TO)
4060       c$=c$(TO LEN(c$)-3)&"_"
4070       fbackup mdir$&a$(TO LEN(a$)-3)&'_',dest$&c$
4080       NEXT lp%
4090     END IF
4100     tc%=FOP_IN(mdir$&a$)                : REMark open source file
4110     date_old=FUPDT(#tc%)                : REMark file date of "old" source file
4120     CLOSE#tc%
4130     tc%=LEN(source$)-4                  : REMark length of name w/o subdirectory
4140     b$=a$(tc% TO)
4150     DELETE dest$&b$
4160     COPY mdir$&a$,dest$&b$
4170     tc%=FOPEN(dest$&b$)
4180     SET_FUPDT#tc%,date_old
4190     CLOSE#tc%
4200   END REPeat lp%
4210   CLOSE#chan%
4220   DELETE myfile$
4230 END DEFine fbackup
4240 :
4250 DEFine FuNction make_all_months$
4260 REMark this makes a string "JanFeb..." in the current language
4270 REMark this should be called during the initialisation part
4280 REMark eg. all_months$=make_all_months$ - dates_init below is a handy proc for that
4290 LOCal string$,lp%,a$,temp
4300   string$="":a$="":temp=0
4310   temp=60*60*24*31
4320   FOR lp%=0 TO 11
4330     a$=DATE$(lp%*temp)
4340     string$=string$&a$(6 TO 8)
4350   END FOR lp%
4360   RETurn string$
4370 END DEFine make_all_months$
4380 :
4390 DEFine FuNction make_date$(dflag%,what_date)
4400 REMark returns date as "01.01.1991" (dflag%=1) or "1991.01.31" (dflag%=0)
4410 REMark if what_date<>0, then it is this date that will be returned
4420 REMark this presumes that a variable "all_month$" exists!
4430   LOCal a$,b$,res
4440   b$=""
4450   IF what_date
4460     a$=DATE$(what_date)         : REMark make date passed as param into string
4470   ELSE
4480     a$=DATE$                    : REMark current date into string
4490   END IF
4500   b$=a$(6 TO 8)                 : REMark 3 letter month abbreviation
4510   res= b$ INSTR all_months$             : REMark find it
4520   IF NOT res
4530        all_months$=make_all_months$     : REMark not found?, make all_month$
4540        res= b$ INSTR all_months$        : REMark and retry
4550   END IF
4560   res=(res+2)/3                 : REMark this is the month in figures
4570   b$=res:IF res<10:b$="0"&b$            : REMark add leading 0 if necessary
4580   IF dflag%:RETurn a$(10 TO 11)&"."&b$&"."&a$(1 TO 4)
4590   RETurn a$(1 TO 4)&"."&b$&"."&a$(10 TO 11)
4600 END DEFine make_date$
4610 :
4620 REMark ------------- zipping --------------
4630 :
4640 DEFine PROCedure zip_sources (docopy%)
4650   del_zips
4660   zip_all_sources_into_one_file
4670   zip_individual_source_dirs
4680   IF docopy%:  fbackup "ram3_","nfa8_"
4690   del_zips
4700 END DEFine zip_sources
4710 :
4720 DEFine PROCedure zip_all_sources_into_one_file
4730 REMark This zips the entire SMSQE sources into one zip file.
4740 REMark Ensure that all non source files have been erased first!
4750 LOCal zip$
4760   PRINT#ochan%, "Zipping all sources into one zip file... "
4770   do_zip " -Q4r9 "&ddr$&"smsqe"&svers$&" dd_* dv3_* ee_* extras_* iod_* keys_* lang_* mac_* minerva_* sbsext_* smsq_* sys_* uti_* util_* nfa1_qxl_* changes_txt readme_txt styleguide_txt whats_new_txt licence_doc licence_txt "
4780 END DEFine zip_all_sources_into_one_file
4790 :
4800 DEFine PROCedure zip_Win_file
4810   PRINT#ochan%, "Zipping the win file..."
4820   do_zip " -Q4r9 nfa8_smsqe"&svers$&"src.win nfa8_SMSQE"&svers$&".WIN"
4830 END DEFine zip_Win_file
4840 :
4850 DEFine PROCedure zip_individual_source_dirs
4860 LOCal lp%,dirname$
4870   RESTORE CURRENT_LINE : REMark make sure no other DATA statement is between this proc anf the "del_zips" proc
4880   PRINT#ochan%,"Zipping individual source dirs..."
4890   REPeat lp%
4900     READ dirname$
4910     IF dirname$="":EXIT lp%
4920     PRINT#ichan%, "Zipping "&dirname$
4930     do_zip " -Q4r9 "&ddr$&dirname$&".zip "&dirname$&"_*"
4940   END REPeat lp%
4950   do_qxl_pc
4960   DATA "dd","dv3","ee","extras","iod","keys","lang","mac","minerva","sbsext","smsq","sys","uti","util"
4970   DATA ""
4980 END DEFine zip_individual_source_dirs
4990 :
5000 DEFine PROCedure do_qxl_pc
5010 LOCal a$
5020   a$="nfa1_qxl_*"
5030   PRINT#ichan%, "Zipping qxl..."
5040   do_zip " -Q4j9 "&ddr$&"qxl.zip "& a$
5050 END DEFine do_qxl_pc
5060 :
5070 DEFine PROCedure del_zips
5080 REMark delete all zips on ddr$
5090 LOCal extns(0)
5100   DIM extns$(1,3)
5110   extns$(1)="zip"
5120   wdel_f ddr$,extns$
5130 END DEFine del_zips
5140 :
5150 DEFine PROCedure s
5160 REMark this resets the data etc dirs to acceptable values, no longer used
5170   DEST_USE dev1_
5180   DATA_USE dev1_basic_
5190   PROG_USE dev1_progs_
5200 END DEFine s
5210 :
5220 DEFine PROCedure zip_binaries (do_delete%)
5230 REMark This zips all binary versions and then possibly deletes them.
5240 REMark They are zipped into one big file and into individual files
5250   LOCal nbr%,lp%,source$,dest$,zip$,f$,zp$
5260   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
5270   REMark first of all, all into one
5280   PRINT#ochan%, "Zipping binaries into one file..."
5290   zip$ =' -Q4j9 '&f$&' '
5300   RESTORE CURRENT_LINE
5310   REPeat lp%
5320     READ source$,dest$
5330     IF source$="":EXIT lp%
5340     PRINT#ichan%, "copying "& source$
5350     COPY_O source$,ddr$&dest$
5360     zip$=zip$&ddr$&dest$ & ' '
5370   END REPeat lp%
5380   do_zip zip$
5390 :
5400   REMark now zip up each individual file
5410   PRINT#ochan%, "Zipping each binary separately..."
5420   zip$ =' -Q4j9 '
5430   RESTORE CURRENT_LINE
5440   REPeat lp%
5450     READ source$,dest$
5460     IF source$="" OR "_txt" INSTR source$:EXIT lp%
5470     PRINT#ichan%, "copying "& source$
5480     COPY_O source$,ddr$&dest$
5490     zp$=zip$&ddr$&dest$&".zip" &" " & ddr$&dest$
5500     do_zip zp$
5510     IF do_delete% AND NOT ("_txt" INSTR source$): DELETE source$
5520   END REPeat lp%
5530   REMark now delete files that aren't zipped
5540   RESTORE CURRENT_LINE
5550   REPeat lp%
5560     READ dest$,dest$
5570     IF dest$="":EXIT lp%
5580     DELETE ddr$&dest$
5590   END REPeat lp%
5600   REMark now copy all remaining files to nfa8_
5610   fbackup ddr$,"nfa8_"
5620   PRINT#ochan%, "Binaries done..."
5630   DATA "dev8_smsq_atari_SMSQ.PRG",  "SMSQE.PRG"       : REMark PRG file for ATARI ST/TT, ready to be used
5640   DATA "dev8_smsq_gold_gold",       "GoldCard_bin"    : REMark gold card Ql colours
5650   DATA "dev8_smsq_gold_gold8",      "GoldCard_256colours_bin"
5660   DATA "dev8_smsq_q40_rom",         "Q40_rom"         : REMark q40/q60 use as rom / lrespr file
5670   DATA "dev8_smsq_qxl_smsqe.exe",   "SMSQEQXL.EXE"    : REMark EXE to be run under DOS on i386 compatible systems with a QXL card installed, ready to be used
5680   DATA "dev8_smsq_aurora_SMSQE",    "Aurora_bin"      : REMark aurora 8 bit
5690   DATA "dev8_smsq_java_java",       "SMSQE"           : REMark Code file for SMSQmulator, ready to be used
5700   DATA "nfa8_Q68_SMSQ.WIN",         "Q68_SMSQ.WIN"    : REMark smsqe for Q68, win drive
5710   DATA "dev8_smsq_qpc_smsqe.bin",   "SMSQE.bin"       : REMark Code file for QPC2, ready to be used
5720   DATA "dev8_ee_ptr_gen",           "ptr_gen"         : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
5730   DATA "dev8_ee_wman_wman",         "wman"            : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
5740   DATA "dev8_ee_hot_rext_english",  "hot_rext_english": REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
5750   DATA "dev8_ee_hot_rext_french",   "hot_rext_french" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
5760   DATA "dev8_ee_hot_rext_german",   "hot_rext_german" : REMark Part of Extended Environment for the non SMSQ/E (e.g. QDOS, SMSQ), ready to be used
5770   DATA "dev8_whats_new_txt",        "whats_new_txt"
5780   DATA "dev8_changes_txt",          "changes_txt"
5790   DATA "dev8_readme_txt",           "readme_txt"
5800   DATA "","" : REMark leave TWO empty strings here
5810 END DEFine zip_binaries
5820 :
5830 DEFine PROCedure do_zip (zip$)
5840 LOCal destt$,progg$,dataa$
5850   destt$=DESTD$
5860   progg$=PROGD$
5870   dataa$=DATAD$
5880   DEST_USE "dev8_"  :PROG_USE "dev8_" :DATA_USE "dev8_"
5890   EW dev1_progs_zip;zip$
5900   DEST_USE destt$ :PROG_USE progg$ :DATA_USE dataa$
5910 END DEFine do_zip
5920 :
5930 DEFine PROCedure do_copy
5940 LOCal lp%,a$ ,f$
5950   PAUSE 80
5960   COPY_O ddr$&smsqe$,"nfa2_new_"&smsqe$
5970   RESTORE 950
5980   REPeat lp%
5990     READ a$
6000     IF a$="":EXIT lp%
6010     COPY_O ddr$&a$&".zip","nfa2_new_"&a$&".zip"
6020   END REPeat lp%
6030   COPY_O ddr$&"qxl.zip","nfa2_new_qxl.zip"
6040   f$ =ddr$&"smsqe"&version$&"_binaries.zip"
6050   COPY_O f$,"nfa2_new_"&"smsqe"&version$&"_binaries.zip"
6060 END DEFine do_copy
6070 :
6080 DEFine PROCedure wdel_f (source$,array_with_extns$)
6090 REMark Delete either all files on dir$, or only all files with any extension
6100 REMark contained in the array_with_extns$ string array. This does NOT recurse
6110 REMark into subdirs.
6120 LOCal lp%,iters%,chan%,myname$,a$,lp2%,dir$
6130   myname$="wdel_f" &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100) &RND(0 TO 100)
6140   chan%=FOP_OVER("ram1_"&myname$)
6150   IF chan%<0:RETurn             : REMark can't open channel, give up
6160   IF LEN(source$)>5
6170     dir$=source$(1 TO 5)
6180   ELSE
6190     dir$=source$
6200   END IF
6210   DIR#chan%,source$
6220   GET#chan%\0
6230   INPUT#chan%,a$
6240   INPUT#chan%,a$
6250   iters%=DIMN(array_with_extns$,1)
6260   IF iters%=0
6270                                     : REMark no extension - delete everything
6280     REPeat lp%
6290       IF EOF(#chan%):EXIT lp%
6300       INPUT#chan%,a$
6310       IF a$==myname$ OR a$="":NEXT lp%
6320       IF endswith% (" ->",a$): NEXT lp%: REMark don't go into subdirs
6330       DELETE dir$&a$
6340     END REPeat lp%
6350   ELSE
6360                                   : REMark only delete files with matching extension
6370     REPeat lp%
6380       IF EOF(#chan%):EXIT lp%
6390       INPUT#chan%,a$
6400       IF a$==myname$ OR a$="":NEXT lp%
6410       FOR lp2%=0 TO iters%
6420         IF endswith% (array_with_extns$(lp2%),a$)
6430           DELETE dir$&a$
6440           EXIT lp2%
6450         END IF
6460       END FOR lp2%
6470     END REPeat lp%
6480   END IF
6490   CLOSE#chan%
6500   DELETE "ram1_"&myname$
6510 END DEFine wdel_f
6520 :
6530 DEFine FuNction endswith%(extension$,name$)
6540 REMark checks whether name$ ends with extension$. Returns 1 if yes, 0 if not. If
6550 REMark either of the params is "", returns 0.
6560 LOCal elen%,nlen%
6570   IF extension$="" OR name$="":RETurn 0
6580   elen%=LEN(extension$)
6590   nlen%=LEN(name$)
6600   IF elen%>nlen%:RETurn 0
6610   IF name$(nlen%-elen%+1 TO)== extension$: RETurn 1
6620   RETurn 0
6630 END DEFine endswith%
6640 :
6650 DEFine PROCedure w
6660 LOCal extns(0)
6670   DIM extns$(1,3)
6680   extns$(1)="asm"
6690   wdel_f "ram3_",extns$
6700 END DEFine w
6710 :
6720 DEFine PROCedure get_current_drive_assignments
6730   current_nfa7$=NFA_USE$(7)
6740   current_nfa8$=NFA_USE$(8)
6750   current_win4$=WIN_DRIVE$(windrv%)
6760 END DEFine get_current_drive_assignment
6770 :
6780 DEFine PROCedure restore_drive_assignments
6790   NFA_USE 7,current_nfa7$
6800   NFA_USE 8,current_nfa8$
6810   WIN_DRIVE windrv%,current_win4$
6820 END DEFine restore_drive_assignments
6830 :
6840 DEFine PROCedure make_oldversion_html
6850 LOCal c%,o%,a$,lp%,versn,versn$
6860   PRINT#ochan%, "Making oldversions html"
6870   c%=FOP_IN("nfa7_oldversions.html")
6880   IF c%<0:PRINT#ochan%, "failed to open input : ";c%;". STOPPED":STOP
6890   o%=FOP_OVER ("nfa8_html_oldversions.html")
6900   IF o%<0:PRINT#ochan%, "failed to open output - STOPPED":STOP
6910   versn=svers$
6920   versn=versn-1
6930   versn$=versn
6940   versn$=versn$(1)&"."&versn$(2 TO)
6950   REPeat lp%
6960     IF EOF(#c%):EXIT lp%
6970     INPUT#c%,a$
6980     IF "</ul>" INSTR a$
6990        PRINT#o%,'     <li> <a href = "old/smsqe'&versn&'src.win.zip">SMSQ/E v. '&versn$&'</a></li>'
7000      END IF
7010      PRINT#o%,a$
7020    END REPeat lp%
7030    CLOSE#c%
7040    CLOSE#o%
7050 REMark   copy_o "nfa8_html_oldversions.html","nfa7_oldversions.html"
7060 END DEFine make_oldversion_html
7070 :

100 REMark $$asmb=dev8_extras_source_outptr_bin,0,10
110 REMark $$asmb=dev1_booty_Qlib_ext,0,12
120 title$='MAKE v1.26'
130 IF JOB$(-1)<>''
140   msgch=FOPEN('con_100x100a0x40'): INK #msgch,7
150   mainch=FOPEN('nul')
160   OUTLN#msgch,512,42,0,28
170   REMark $$heap=4096
180   REMark $$stak=2048
190   REMark $$buff=256
200 ELSE
210   WINDOW#2,512,224,0,32
220   msgch=4: OPEN #4,'con':mainch=5:OPEN#5,'con'
230   cmd$='dev1_asm_lib_menus_lnk':INK #msgch,7
240 END IF
250 DIM subs$(7,30)
260 WINDOW #msgch;512,42,0,28
270 BORDER #msgch;1,2,0:PAPER #msgch;0
280 IF cmd$<>'':PE_PRINT #msgch,cmd$:make cmd$:STOP
290 REPeat l
300   CLS #msgch
310   PRINT #msgch;'Please enter linker command file name and options'\' (-i|f -p -c|l|x|n -r|w|q|t <name> -s<n> <name>)'\'Files possibly on "';DATAD$;'".'
320   REPeat m
330     INPUT #msgch;'Command ?:';x$
340     IF x$='' : EXIT m
350     IF x$=='stop' OR x$=='quit' : STOP
360     make x$
370   END REPeat m
380 END REPeat l
390 :
400 DEFine PROCedure make(opt$)
410 LOCal ext_len%,force_asm%,lnk_ext$,no_wait%
420 : REMark  Set up required options
430 :
440   dev$='':prg$=PROGD$:CLS #msgch
450   lnk_ext$='':ext_len%=0
460   Q_ERR_ON "EW"
470   a="_lnk" INSTR opt$
480   IF a
490      ext_len%=4:lnk_ext$='lnk'       : REMark try to find my extension
500   ELSE
510      a="_link" INSTR opt$: IF a:ext_len%=5:lnk_ext$='link'
520   END IF
530   IF a
540     opt$=opt$ & '   '               : REMark if we have an extension, filter it out
550     opt$=opt$(1 TO a-1)&opt$(a+ext_len% TO)
560   ELSE
570     a="_asm" INSTR opt$             : REMark called for a simple _asm file...
580     IF a:logch=-1:rtflag%=do_simple_asm (opt$):IF NOT rtflag%:PRINT#msgch; "Errors !!! - tap a key":a$=INKEY$(#msgch,-1)
590     RETurn
600   END IF
610   link$=get_item$(1,opt$)           : REMark get link file
620   IF link$(1)=='-' : link$='':ELSE link$=link$&'_'
630   REMark  Defaults are assemble only new files, allow assembly, no link
640   force_asm%=0:xrf$='':no_asm%=0:do_link%=0:as_list%=0:log$=dev$&link$&'log':no_wait%=0
650   prfch=-1
660   csource=0:prog$=' \p':rle$='_rel': map=1: map$=' -nolist'
670   fsource=0:fopt$=''
680 :
690 REMark now parse options of command string
700 :
710   IF '-f' INSTR opt$ : force_asm%=1     : REMark  Force assembly
720   IF '-i' INSTR opt$ : no_asm%=1        : REMark  Inhibit assembly
730   IF '-w' INSTR opt$ : no_wait%=1       : REMark don't stop after error
740   IF '-l' INSTR opt$ : map$=' \m': do_link%=1 : REMark  Link if possible
750   IF '-x' INSTR opt$ : map$=' \x': do_link%=1 : REMark  Produce xref
760   IF '-n' INSTR opt$ : map$=''   : do_link%=1 : REMark  No map
770   IF '-o' INSTR opt$
780     fopt$='/'&get_item$(('-o' INSTR opt$)+2,opt$)
790   END IF                                                : REMark  Compiler options
800 :
810   IF '-p' INSTR opt$ : as_list%=1                  : REMark  Listing file
820 :
830   spos=1                                                : REMark now do substitutes
840   REPeat subs%
850     IF '-s' INSTR opt$(spos TO)
860       spos=('-s' INSTR opt$(spos TO))+1+spos
870       snum='0'&opt$(spos)
880       subs$(snum)=get_item$(spos+1,opt$)      : REMark parse out substitutes
890       IF '-' INSTR subs$(snum)=1: subs$(snum)=''
900     ELSE
910       EXIT subs%
920     END IF
930   END REPeat subs%
940 :
950   IF '-e' INSTR opt$ THEN
960     log1$=get_item$(('-e' INSTR opt$)+2,opt$) :  REMark  Set log file
970     IF log$(1)<>'-' : log$=log1$
980   END IF
990   logch=FOP_OVER(log$)
1000   dt$=DATE$:dt$=dt$(5 TO 12)&dt$(1 TO 5)&'at'&dt$(12 TO)
1010   plog title$&' on'&dt$&CHR$(10)&'Command string: '&opt$&CHR$(10)
1020   IF dev$<>""
1030     plog 'Source directory: '&dev$&CHR$(10)&CHR$(10) : REMark say hello
1040   ELSE
1050     plog 'Source directory: '&link$&CHR$(10)&CHR$(10)
1060   END IF
1070   IF logch<0 : plog 'Unable to open log file '&dev$&log$&'log'&CHR$(10)
1080 :
1090   in_rel$=''
1100   IF '-r' INSTR opt$
1110     in_rel$=dev$&get_item$(('-r' INSTR opt$)+2,opt$):  REMark       Input file to link
1120     l=LEN(in_rel$):IF in_rel$(l-3 TO l)=='_REL': in_rel$=in_rel$(1 TO l-4)
1130   END IF
1140 :
1150   IF '-q' INSTR opt$
1160     csource=1:rle$='_rlc'               :  REMark    Input QC file to link
1170     in_rel$=dev$&get_item$(('-q' INSTR opt$)+2,opt$)
1180     l=LEN(in_rel$):IF in_rel$(l-3 TO l)=='_RLC': in_rel$=in_rel$(1 TO l-4)
1190   END IF
1200 :
1210   IF '-t' INSTR opt$
1220     fsource=1:rle$='_rlf'               :  REMark    Input Fortran file to link
1230     in_rel$=dev$&get_item$(('-t' INSTR opt$)+2,opt$)
1240     l=LEN(in_rel$):IF in_rel$(l-3 TO l)=='_RLF': in_rel$=in_rel$(1 TO l-4)
1250   END IF
1260 :
1270   IF '-c' INSTR opt$
1280     lcf$=dev$&link$&'lib'               :  REMark    Concatenate local library
1290     l_nam=LEN(lcf$):do_link%=do_cctf(lcf$,as_list%,1)
1300     IF logch>=0 : CLOSE #logch:PE_PRINT #msgch;'Log file closed.'
1310     RETurn
1320   END IF
1330 :
1340   lcf$=dev$&link$&lnk_ext$              : REMark make linker control file name
1350 :
1360 : REMark  Do any assemblies required
1370 :
1380   IF in_rel$<>'': IF try_asm('INPUT '&in_rel$&rle$,as_list%)<0: do_link%=-1
1390   linkch=FOP_IN(lcf$)                   : REMark open linker control file
1400   IF linkch<0
1410     plog 'Error opening '&lcf$&' - aborting.'&CHR$(10)
1420     IF logch>=0 : CLOSE #logch          : REMark OOOPS!
1430     RETurn
1440   END IF
1450 :
1460   REPeat gline%
1470     IF EOF(#linkch): EXIT gline%        : REMark do until no more lines
1480     INPUT #linkch;a$;                   : REMark get command
1490     IF a$='' : NEXT gline%              : REMark skip blank lines
1500     REPeat try_subs%
1510       subs='#' INSTR a$                 : REMark try to do substitution
1520       IF NOT subs: EXIT try_subs%       : REMark no need
1530       subn=a$(subs+1)                   : REMark sub number
1540       SELect ON subs
1550         =1:a$=subs$(subn) & a$(3 TO)
1560         =LEN(a$)-1: a$=a$(1 TO subs-1) & subs$(subn)
1570         =REMAINDER : a$=a$(1 TO subs-1) & subs$(subn) & a$(subs+2 TO)
1580       END SELect
1590     END REPeat try_subs%
1600     tterr= try_asm(a$,as_list%)         : REMark assemble file if necessary
1610     IF (NOT tterr) AND (do_link%<>-1):do_link% =1:map$= " \m"
1620     IF tterr<0 : do_link%=-1
1630   END REPeat gline%
1640   CLOSE #linkch                         : REMark close linker control file
1650   plog CHR$(10)&'Linker command file closed.'&CHR$(10)
1660 :
1670 : REMark  Now link if necessary
1680 :
1690   rtflag%=0
1700   SELect ON do_link%
1710     =1: IF prog$==' \p'
1720           prog$= lcf$(1 TO LEN(lcf$)-ext_len%)&'_exe': REMark resulting program file
1730         END IF
1740         mapf$=dev$ & link$ & lnk_ext$&'_map'  : REMark linker error (map) file
1750         lcm$='\l ' & lcf$ & map$ &mapf$& ' \p'&prog$:REMark  linker command file
1760         IF in_rel$<>'' : lcm$=in_rel$&rle$&' '&lcm$: mapf$=in_rel$ & '_map'
1770         FOR subn=0 TO 7
1780           IF subs$(subn)<>'': lcm$=lcm$ & ' \' & subn & ' ' & subs$(subn)
1790         END FOR subn
1800         plog 'Linking: '&lcm$&CHR$(10)
1810         nm$=''
1820         my_err=EXEPF_W('Linker',#mainch;lcm$) : REMark use linker thing
1830         IF my_err=-7
1840           plog 'Linker thing error: '&my_err&' ... now using linker file'
1850           EW prg$&'Linker',#mainch;lcm$:nm$=''    : REMark if pb, use linker prog
1860           my_err=Q_ERR
1870         END IF
1880         IF my_err
1890           er=my_err: wr=0: ud=0         : REMark some error in linking
1900         ELSE
1910           erfch=FOP_IN(mapf$)           : REMark open linker error file
1920           IF erfch>0
1930              GET #erfch\FLEN(#erfch)-10:INPUT #erfch,a$
1940              not_hex%=0
1950              FOR mlp=1 TO 8: IF NOT a$(mlp) INSTR '0123456789abcdef':not_hex%=1
1960              IF not_hex%
1970                plog "linker didn't finish this file"
1980                ud=0:wr=0:er=-1
1990              ELSE
2000                er=HEX(a$(1 TO 4))          : REMark get linker errors/warnings
2010                wr=HEX(a$(5 TO 8))
2020                ud=0
2030                IF wr<0 OR er<0 : er=-1
2040              END IF
2050              CLOSE #erfch
2060           ELSE
2070              plog 'Unable to open linker error file "'&mapf$&'".'&CHR$(10)
2080              ud=0:wr=0:er=-1
2090           END IF
2100         END IF
2110         IF wr>0 : nm$=wr:er$=' warning'&FILL$('s',wr>1)
2120         IF er>0 : nm$=er:er$=' error'&FILL$('s',er>1)
2130         IF er<0 : nm$='Fatal':er$=' error'
2140         IF nm$<>'' : plog nm$&er$&' found during link.'&CHR$(10):rtflag%=1
2150     =0: plog 'Done.'&CHR$(10)                 : REMark no linking necessary
2160     =-1:plog 'Errors - no link.'&CHR$(10):rtflag%=1:REMark OOOPS
2170   END SELect
2180   IF NOT rtflag%
2190     plog "No errors" & CHR$(10)
2200   END IF
2210   IF logch>=0 : CLOSE #logch:PE_PRINT #msgch;'Log file closed.'
2220   IF rtflag% AND NOT no_wait%:PRINT#msgch; "Errors !!! - tap a key":a$=INKEY$(#msgch,-1)
2230 END DEFine make
2240 :
2250 DEFine FuNction get_item$(off,x$)
2260 REMark this parses options and returns the string corresponding to one option
2270 LOCal res$
2280   res$=no_white$(x$(off TO LEN(x$)))&' ': REMark get rid of leading spaces
2290   RETurn res$(1 TO ' ' INSTR res$-1)         : REMark return string until next space
2300 END DEFine  get_item$
2310 :
2320 DEFine FuNction no_white$(x$)
2330 REMark gets rid of leading spaces
2340 LOCal lp%,res$:res$=x$
2350   REPeat lp%
2360     IF LEN(res$)<1 : EXIT lp%
2370     IF res$(1)<>' ' : EXIT lp%
2380     IF LEN(res$)>1 : res$=res$(2 TO LEN(res$))
2390   END REPeat lp%
2400   RETurn res$
2410 END DEFine no_white$
2420 :
2430 DEFine FuNction try_asm(rel$,as_list%)
2440 REMark this attempts to assemble/compile a file, if necessary
2450 LOCal rlt,l_nam,ext$,ccr
2460   IF rel$(1 TO 7)=='PROGRAM': prog$=' \p'&get_item$(8,rel$): RETurn 1
2470   IF no_asm%: RETurn 1
2480   IF NOT(rel$(1 TO 5)=='INPUT' OR rel$(1 TO 7)=='LIBRARY') : RETurn 1
2490   rel$=no_white$(rel$(' ' INSTR rel$ TO LEN(rel$))):l_nam=LEN(rel$)
2500   IF rel$='*' : RETurn 1
2510   ext$=rel$(l_nam-3 TO l_nam):rlt=ext$ INSTR '_rel_lib_rlc_rlf_dnc'
2520   SELect ON rlt
2530     =17:IF FTEST(rel$)<>-7 : RETurn 1        : REMark dnc
2540        plog rel$&' not found.'&CHR$(10):RETurn -1
2550     =13:RETurn do_f77(rel$,as_list%)         : REMark fortran
2560     =9:ccr=do_qc(rel$,as_list%)    : REMark c file
2570        SELect ON ccr
2580          =-1:RETurn -1             : REMark error
2590          =0,1:RETurn do_asm(rel$,as_list%) : REMark now try to assemble
2600        END SELect
2610     =5:RETurn do_cctf(rel$,as_list%,1)       : REMark concatenate library
2620     =1:RETurn do_asm(rel$,as_list%)          : REMark assemble file
2630     =REMAINDER :plog 'File '&rel$&' is not a _REL file: ignored.'&CHR$(10)
2640   END SELect
2650   RETurn 1
2660 END DEFine try_asm
2670 :
2680 DEFine FuNction do_cctf(lib$,as_list%,cctx)
2690   LOCal rel$,asr,libdt
2700   do_cct=0
2710   cct$=lib$(1 TO l_nam-3):cct$=cct$&'cct':cctch=FOP_IN(cct$)
2720   IF cctch=-7 AND cctx: cct$=cct$&'x': cctch=FOP_IN(cct$)
2730   SELect ON cctch
2740     =-7:plog 'No _CCT for '&lib$&' - assumed OK.'&CHR$(10):RETurn 1
2750     =-999 TO -1
2760       plog "Couldn't open _CCT file "&cct$&'.'&CHR$(10)
2770       RETurn -1
2780   END SELect
2790   plog 'Processing '&cct$&'.'&CHR$(10)
2800   IF FTEST(lib$)=-7
2810     do_cct=1
2820     libdt=0
2830   ELSE
2840     libdt=FUPDT(\lib$)
2850     IF libdt<FUPDT(#cctch) : do_cct=1
2860   END IF
2870   REPeat read_cct
2880     IF EOF(#cctch) : EXIT read_cct
2890     INPUT #cctch;rel$
2900     IF rel$='' : NEXT read_cct
2910     IF NOT(rel$(1) INSTR 'abcdefghijklmnopqrstuvwxyz') : NEXT read_cct
2920     rel$=get_item$(1,rel$)
2930     asr=try_asm('INPUT '&rel$,as_list%)
2940     IF FTEST(rel$) : asr=-1
2950     SELect ON asr
2960       =1:IF libdt<FUPDT(\rel$) AND do_cct>=0 : do_cct=1
2970       =0:IF do_cct>=0 : do_cct=1
2980       =-1:do_cct=-1
2990     END SELect
3000   END REPeat read_cct
3010   CLOSE #cctch
3020   SELect ON do_cct
3030     =1: plog 'Concatenating '
3040         EW prg$&'cctf',cct$,lib$
3050         my_err=Q_ERR
3060         IF my_err
3070            plog '- fatal error.'&CHR$(10):RETurn -1
3080         ELSE
3090            plog '- OK.'&CHR$(10)
3100         END IF
3110     =0: plog 'Done.'&CHR$(10):RETurn 1
3120     =-1:plog 'Assembler errors - no concatenation.'&CHR$(10):RETurn -1
3130   END SELect
3140   RETurn 0
3150 END DEFine do_cctf
3160 :
3170 DEFine FuNction do_asm(rel$,as_list%)
3180   REMark returns -1 if error, 0 if OK, 1 if no need to assemble
3190   LOCal asm$,listf$,listo$,re_ass:l_nam=LEN(rel$)
3200   asm$=rel$(1 TO l_nam-3):asm$=asm$&'asm'
3210   IF as_list%=0
3220     listf$=rel$(1 TO l_nam-3)&'err'
3230     listo$=' -errors'
3240   ELSE
3250     listf$=rel$(1 TO l_nam-3)&'lst'
3260     listo$=' -nosym'
3270   END IF
3280   re_ass=1
3290   IF FTEST(rel$)=0 : re_ass=(FUPDT(\rel$)<FUPDT(\asm$))
3300   IF re_ass OR force_asm%
3310     plog 'Assembling '&asm$
3320     my_err=EXEPF_W('QMac',#mainch;asm$&' '&listf$&' '&rel$&listo$)
3330     IF my_err=-7
3340      REMark plog 'Qmac thing error: '&my_err
3350      EW prg$&'Qmac',#mainch;asm$&' '&listf$&' '&rel$&listo$
3360      my_err=Q_ERR
3370     END IF
3380     IF my_err
3390       er$='fatal':wr$='0'
3400     ELSE
3410       erfch=FOP_IN(listf$)
3420       IF erfch<0 : plog " - can't open error file."&CHR$(10):RETurn -1
3430       GET #erfch\FLEN(#erfch)-245
3440       er$=numaft(#erfch,'total errors',14)
3450       wr$=numaft(#erfch,'total warnings',17)
3460       CLOSE #erfch
3470     END IF
3480     IF er$<>'0'
3490       er$=' - '&er$&' error'&FILL$('s',(er$<>'1' AND er$<>'fatal'))&'.'&CHR$(10)
3500       plog er$:DELETE rel$:RETurn -1
3510     END IF
3520     IF wr$<>'0'
3530       wr$=' - '&wr$&' warning'&FILL$('s',wr$<>1)&'.'&CHR$(10):plog wr$
3540       RETurn 0
3550     END IF
3560     plog ' - OK.'&CHR$(10)
3570     IF listo$==' -errors' : DELETE listf$
3580     RETurn 0
3590   END IF
3600   RETurn 1
3610 END DEFine  do_asm
3620 :
3630 DEFine PROCedure plog(x$)
3640   PE_PRINT #msgch;x$;
3650   IF logch>=0 : PRINT #logch;x$;
3660 END DEFine plog
3670 :
3680 DEFine FuNction numaft(ch,x$,off)
3690   LOCal rd$,ans,l,m
3700   rd$=FILL$(' ',200)
3710   REPeat l
3720     IF EOF(#ch) : RETurn -1
3730     Q_ERR_ON 'input'
3740     REPeat m
3750       INPUT #ch;rd$;
3760       ans=Q_ERR
3770       IF ans=0 : EXIT m
3780       IF ans<>-5 : RETurn 1000-ans
3790     END REPeat m
3800     Q_ERR_OFF 'input'
3810     IF x$ INSTR rd$ : EXIT l
3820   END REPeat l
3830   ans=x$ INSTR rd$+off:IF ans<1 : ans=1
3840   ans=rd$(ans TO)
3850   RETurn ans
3860 END DEFine numaft
3870 :
3880 DEFine FuNction do_qc(rel$,as_list%)
3890   REMark returns -1 if error, 0 if OK, 1 if no need to compile
3900   LOCal c$,asm$,listf$,listo$,re_ass,my_err:l_nam=LEN(rel$)
3910   asm$=rel$(1 TO l_nam-3):c$=asm$&'c':asm$=asm$&'asm'
3920   IF as_list%=0
3930     listf$=rel$(1 TO l_nam-3)&'cer'
3940     listo$=' -l '
3950   ELSE
3960     listf$=rel$(1 TO l_nam-3)&'cls'
3970     listo$=' -c -l '
3980   END IF
3990   re_ass=1
4000   IF FTEST(asm$)<>-7 : re_ass=(FUPDT(\asm$)<FUPDT(\c$))
4010   IF re_ass OR force_asm%
4020     plog 'Compiling '&c$
4030     IF prfch>0 : PRINT #prfch;"spl '";listf$;"'"
4040     my_err=EXEPF_W('qc',#mainch;c$&' '&listo$&listf$)
4050     IF my_err=-7
4060      plog 'QC thing not found'&CHR$(10)
4070      EW prg$&'qc',#mainch;c$&' '&listo$&listf$
4080      my_err=Q_ERR
4090     END IF
4100     IF my_err
4110       DELETE asm$
4120       er$=' - compiler error(s).'&CHR$(10)
4130       plog er$:DELETE rel$:RETurn -1
4140     ELSE
4150       plog ' - OK.'&CHR$(10)
4160       IF listo$==' -l ' : DELETE listf$
4170       RETurn 0
4180     END IF
4190   END IF
4200   RETurn 1
4210 END DEFine do_qc
4220 :
4230 DEFine FuNction do_f77(rel$,as_list%)
4240   REMark returns -1 if error, 0 if OK, 1 if no need to compile
4250   LOCal ftn$,xfopt$,re_ass,fo$,lo$:l_nam=LEN(rel$)
4260   ftn$=rel$(1 TO l_nam-4)
4270   fo$='gu':lo$='l'
4280   xfopt$=fopt$:IF xfopt$='' : xfopt$='/gu'
4290   FOR i=1 TO 2:IF NOT(fo$(i) INSTR xfopt$) : xfopt$=xfopt$&fo$(i)
4300   IF as_list%=1
4310     FOR i=1 TO 1:IF NOT(lo$(i) INSTR xfopt$) : xfopt$=xfopt$&fo$(i)
4320   END IF
4330   re_ass=1
4340   IF FTEST(rel$)<>-7 : re_ass=(FUPDT(\rel$)<FUPDT(\ftn$&'_for'))
4350   IF re_ass OR force_asm%
4360     plog 'Compiling '&ftn$
4370     IF prfch>0 : PRINT #prfch;"spl '";ftn$;"_prn'"
4380     DELETE ftn$&'_log'
4390     my_err=EXEPF_W('f77';ftn$&xfopt$ )
4400     IF my_err
4410        plog 'QC thing not found'&CHR$(10)
4420        EW prg$&'f77';ftn$&xfopt$
4430        my_err=Q_ERR
4440     END IF
4450     IF my_err
4460       er$=' - fatal error.'&CHR$(10)
4470       plog er$:DELETE rel$:RETurn -1
4480     END IF
4490     erfch=FOP_IN(ftn$&'_log')
4500     IF erfch<0 : plog " - fatal error."&CHR$(10):DELETE ftn$&'_rel':DELETE rel$:RETurn -1
4510     GET #erfch\FLEN(#erfch)-300
4520     wr=numaft(#erfch,'COMPILATION',-999)
4530     er=numaft(#erfch,'FATAL COMPI',-999)
4540     CLOSE #erfch:re_ass=(wr>0)+2*(er>0)
4550     SELect ON re_ass
4560       =0:plog ' - OK.'&CHR$(10)
4570         IF NOT('l' INSTR xfopt$) : DELETE ftn$&'_LOG'
4580         DELETE rel$:RENAME ftn$&'_rel' TO rel$:RETurn 0
4590       =1:lo$=wr:lo$=' - '&lo$&' warning'&FILL$('s',wr>1)&'.'&CHR$(10)
4600         plog lo$
4610         DELETE rel$:RENAME ftn$&'_rel' TO rel$:RETurn 0
4620       =2,3:lo$=er:lo$=' - '&lo$&' error'&FILL$('s',er>1)&'.'&CHR$(10)
4630         plog lo$
4640         DELETE rel$:DELETE ftn$&'_rel':RETurn -1
4650     END SELect
4660   END IF
4670   RETurn 1
4680 END DEFine do_f77
4690 :
4700 DEFine FuNction do_simple_asm(rel$)
4710   REMark returns 0 if error, 1 if OK
4720   LOCal er$,wr$
4730   LOCal prg$,asm$,listf$,listo$,re_ass:l_nam=LEN(rel$)
4740   er$="0":wr$="0"
4750   prg$=PROGD$
4760   asm$=rel$:rel$=rel$(1 TO LEN(rel$)-3)
4770   listf$=rel$&'err'
4780   rel$=rel$&'exe'
4790   listo$=' -errors -NOLINK'
4800   plog 'Assembling '&asm$&" "&listf$&" "&rel$&listo$
4810   my_err=EXEPF_W('QMac',#mainch;asm$&' '&listf$&' '&rel$&listo$)
4820   IF my_err=-7
4830      REMark plog 'QMac thing not found'&CHR$(10)
4840      EW prg$&'Mac',#mainch;asm$&' '&listf$&' '&rel$&listo$
4850      my_err=Q_ERR
4860   END IF
4870   IF my_err
4880       er$='fatal':wr$='0'
4890   ELSE
4900       erfch=FOP_IN(listf$)
4910       IF erfch<0 : plog " - can't open error file."&CHR$(10):RETurn 0
4920       GET #erfch\FLEN(#erfch)-245
4930       er$=numaft(#erfch,'total errors',14)
4940       wr$=numaft(#erfch,'total warnings',17)
4950       CLOSE #erfch
4960   END IF
4970   IF er$<>'0'
4980       er$=' - '&er$&' error'&FILL$('s',(er$<>'1' AND er$<>'fatal'))&'.'&CHR$(10)
4990       plog er$:DELETE rel$:RETurn 0
5000   END IF
5010   IF wr$<>'0'
5020       wr$=' - '&wr$&' warning'&FILL$('s',wr$<>1)&'.'&CHR$(10):plog wr$
5030   END IF
5040   plog ' - OK.'&CHR$(10)
5050   IF er$='0' AND wr$='0':DELETE listf$
5060   RETurn 1
5070 END DEFine  do_simple_asm
5080 :
5090 DEFine PROCedure sa
5100   SAVE_O dev8_extras_source_make_bas
5110 END DEFine

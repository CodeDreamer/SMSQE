; MFP keys
	nolist

mfp_port equ	$00*mfp.i+mfp.o   mfp port
mfp_acte equ	$01*mfp.i+mfp.o  ; active edge register
mfp.acte equ	  %00000000	   ; all edges high-low
mfp_ddir equ	$02*mfp.i+mfp.o  ; data direction register
mfp.ddir equ	  %00000000	   ; all input
mfp_iena equ	$03*mfp.i+mfp.o  ; mfp interrupt enable a
mfp_ienb equ	$04*mfp.i+mfp.o  ; mfp interrupt enable b
mfp_pnda equ	$05*mfp.i+mfp.o  ; mfp pending interrupt a
mfp_pndb equ	$06*mfp.i+mfp.o  ; mfp pending interrupt b
mfp_isa  equ	$07*mfp.i+mfp.o  ; mfp in service register a
mfp_isb  equ	$08*mfp.i+mfp.o  ; mfp in service register b
mfp_mska equ	$09*mfp.i+mfp.o  ; interrupt mask a
mfp_mskb equ	$0a*mfp.i+mfp.o  ; interrupt mask b
mfp_vect equ	$0b*mfp.i+mfp.o  ; vector register
mfp_actl equ	$0c*mfp.i+mfp.o  ; timer A control
mfp.1.6s equ	  $01		   ; 1.6us timer
mfp.4us  equ	  $02		   ; 4 us timer
mfp.80us equ	  $07		   ; 80 us timer
mfp_bctl equ	$0d*mfp.i+mfp.o  ; timer B control
mfp.div4 equ	  $01		   ; timer div 4
mfp.d200 equ	  $07		   ; timer div 200
mfp_cdct equ	$0e*mfp.i+mfp.o  ; timer CD control
mfp_adat equ	$0f*mfp.i+mfp.o  ; timer A data
mfp_bdat equ	$10*mfp.i+mfp.o  ; timer B data
mfp_cdat equ	$11*mfp.i+mfp.o  ; timer C data
mfp_ddat equ	$12*mfp.i+mfp.o  ; timer D data
mfp_uctl equ	$14*mfp.i+mfp.o  ; mfp USART control
mfp.npty equ	  %00000000	   ; no parity
mfp.odd  equ	  %00000100	   ; odd parity
mfp.even equ	  %00000110	   ; even parity
mfp.sync equ	  %00000000	   ; synchronous
mfp.1stp equ	  %00001000	   ; 1 stop
mfp.lstp equ	  %00010000	   ; long stop
mfp.2stp equ	  %00011000	   ; 2 stop bits
mfp.8bit equ	  %00000000	   ; 8 bits
mfp.7bit equ	  %00100000	   ; 7 bits
mfp.6bit equ	  %01000000	   ; 6 bits
mfp.5bit equ	  %01100000	   ; 5 bits
mfp.adiv equ	  %10000000	   ; asynchronous clock divided by 16
mfp_rstt equ	$15*mfp.i+mfp.o  ; receiver status
mfp.rxen equ	  %00000001	   ; receive enable
mfp.rxer equ	  %01111000	   ; error bits
mfp..rxr equ	  7		   ; receive ready
mfp_tstt equ	$16*mfp.i+mfp.o  ; transmitter status
mfp.txen equ	  %00000001	   ; transmitter enable
mfp.tbrk equ	  %00001001	   ; transmit break
mfp..txr equ	  7		   ; transmitter ready
mfp_sdat equ	$17*mfp.i+mfp.o  ; rx tx data

mfp_txie equ	mfp_iena	 ; transmit buffer empty enable
mfp_txis equ	mfp_isa 	 ; transmit buffer empty in service
mfp_txim equ	mfp_mska	 ; transmit buffer empty mask
mfp..txi equ	  2		 ; transmit buffer empty interrupt bit
mfp_rxie equ	mfp_iena	 ; receive buffer full enable
mfp_rxis equ	mfp_isa 	 ; receive buffer full in service
mfp_rxim equ	mfp_mska	 ; receive buffer full mask
mfp..rxi equ	  4		 ; receive buffer full interrupt bit

	list

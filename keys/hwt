; Hardware Table Definition SMSQ
	nolist

hwt_top   equ	$00		 ; long  current top of table
hwt_ptr   equ	$04		 ; long  pointer above top entry
hwt_table equ	$10		 ; the table itself
hwt.table equ	$10		   ; 10 bytes per entry
hwt_link  equ	  $00		   ; long  pointer to hardware linkage
hwt_serve equ	  $04		   ; long  pointer to server

hwt_intl  equ	  $0c		   ; byte  hardware interrupt level
hwt_prio  equ	  $0d		   ; byte  priority within interrupt level
hwt_type  equ	  $0e		   ; byte  type of hardware
hwt.spec  equ	    $ff 	     ; special rather than generic
hwt.kbd   equ	    $01 	     ; generic keyboard
hwt.mse   equ	    $02 	     ; generic mouse
hwt.par   equ	    $03 	     ; generic parallel port
hwt.ser   equ	    $04 	     ; generic serial purt
hwt.wav   equ	    $05 	     ; generic wave synth
hwt.logn  equ	  $0f		   ; byte  logical port number

hwti.flag equ	  'HWTI'	   l hardware table based interrupt flag

drd_check  equ	$00		 ; vector  routine to check if hardware present
drd_vector equ	$02		 ; vector  table of vectors to set
drd_preset equ	$04		 ; vector  table of preset values
drd_init   equ	$06		 ; vector  initialisation routine
drd_iserve equ	$08		 ; vector  interrupt server table

; The check routine is called with the port number in d0.
; If d0 is 0 on entry it should return the highest port number in d0
; If d0 is non zero on entry it should return with the port number in d0
; and the hardware base in a4 (or 0 in d0 if no hardware).

; The vector table is a table of word offset in linkage block, word vector.

; The preset table is a table of word offset, word length, words of data.

; The initialisation routine is called after the linkage block is set up
; but with interrupts disabled (the interrupt servers will not have been
; linked in), it is called with a pointer to the hardware table. The entry
; at the top of the table will be set except for the interrupt level and
; priority.

; The interrupt server table has 6 byte entries.

isv_server equ	$00	; vector  interupt server
isv_intl   equ	$02	; byte	interrupt level
isv_prio   equ	$03	; byte	priority within the level
isv_type   equ	$04	; byte	type of hardware
isv_spare  equ	$05	; byte	spare

; The priority is normally the log of inverse of the max delay.
; 0 represents 1 second, 10 represents 1 ms, 20 represents 1 us,

; The register usage can be changed to suit individual systems but it
; is assumed that a3, a4 and a5 will always be used and a5 will not be smashed
; by interrupt servers. Generalised interrupt servers also set a flag in d6.
;
; Typically an interrupt server can smash registers d0-d2/d7/a1-a4. These
; registers (d6) and a5 should be saved on entry to the interrupt system.
; Each interrupt server is called whether or not there is an interrupt from
; its hardware.

; The first operation is, therefore, a check for an interrupt from its hardware.
; Two mechanisms are provided to exit from the interrupt servicing loop.
; The first is to set d6 at the start of the list and, if a server services
; an interrupt, it clears d6.
; The second is than one or more servers can perform a general check if it finds
; its own interrupt is not active.

; The servers are not called using the stack, but each server calls the next
; using the interupt service list.
;	move.l	(a5)+,a4		 ; next server
;	move.l	(a5)+,a3		 ; next linkage
;	jmp	(a4)			 ; jump to it

; The general server starts with a system dependent preamble that is copied
; into the interrupt list. The list follows the preamble directly. For 32 bit
; bus processors, the preamble should be padded out to a long word.
;	movem.l isv.regs,-(sp)		 ; save the interrupt server registers
;	lea	table(pc),a5
;	st	d6			 ; reset flag
;	move.l	(a5)+,a4		 ; first server
;	move.l	(a5)+,a3		 ; first linkage
;	jmp	(a4)			 ; jump to it
; table

; The last entry in the list is not an interrupt server, but the postable which
; will be called with the pointer to the first item in the table in a3.
; Typically, the postamble code will 'test and set' d6 and either return from
; interrupts or go back to the start of the loop.
;	tst.b	d6			 ; simple test
;	bne.s	rte			 ; nothing more
;	move.l	a3,a5			 ; start of list
;	st	d6			 ; reset flag
;	move.l	(a5)+,a4		 ; first server
;	move.l	(a5)+,a3		 ; first linkage
;	jmp	(a4)			 ; jump to it

	list

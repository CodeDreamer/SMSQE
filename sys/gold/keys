; Keys for (Super)Gold card odd facilities

	nolist

; (S)GC ROM
glk_gold  equ	$40000		; base of GOLD section during boot-phase
glx_gold  equ	$10000		; base of RAM copy
glk.gold  equ	$8000		; size of GOLD section of ROM

glk_ptch  equ	$48000		; base of PATCH/EXTRA section during boot-phase
glx_ptch  equ	$1c200		; base of RAM copy
glk.ptch  equ	$3e00		; size of PATCH/EXTRA section of ROM

glk_boot  equ	$4c000		; base of BOOT section during boot-phase
glk_strt  equ	glk_boot+$a	; start address in BOOT section
glk.boot  equ	$4000		; size of BOOT section of ROM

; SGC address space areas
sgk_qlrom equ	$400000 	; base of QLROM in SGC
sgk_extio equ	$4c0000 	; extended I/O area
sgk_end   equ	$500000 	; end of address space

ql_clock  equ	$18000		; QL clock address

glk_bas0  equ	$1c000		; assumed base reg

; $1c000
glo_rtcc  equ	$00		; rtc control register
glk.rtcs  equ	%01010000	; rtc Stop
glk.rtcg  equ	%00010000	; rtc GO
glo_ten   equ	$04		; rtc 1/10s of seconds
glo_s01   equ	$08		; rtc seconds units
glo_s10   equ	$0c		; rtc seconds tens
glo_d01   equ	$20		; rtc days units
glo_y10   equ	$34		; rtc years tens
glo_dow   equ	$38		; rtc day of week
glo_rtcs  equ	$3c		; rtc clock setting register
glk..24h  equ	4		; rtc 24 hours mode
glk..pm   equ	5		; rtc pm
glk.lpsf  equ	6		; leap year shift

glk.rtca  equ	4		; rtc address spacing

glo_rena  equ	$60		; RAM enable
glo_rdis  equ	$64		; RAM disable

sgo_scr2  equ	$68		; SGC screen 2 disable (write) or enable (read)

glo_pbyt  equ	$70		; PAR data byte
glo_pstb  equ	$78		; PAR data strobe
glo_pbusy equ	$e0		; PAR busy flag (bit 7)

; Floppy registers
fdc_dctl  equ	$40
fdc_stat  equ	$80
fdc_data  equ	$a0
fdc_rate  equ	$e0

; $1c100
sgx_work  equ	$1c100		; work area
sgo_slug  equ	$00		; SLUG brake. Two words: 1st = NOT(2nd)
sgo.slugd equ	$ffff0000	; SLUG disabled
sgo_prtc  equ	$04		; >0 = RTC protected
sgo_rtcs  equ	$06		; RTC status. Two bytes: 1st = NOT(2nd)
rtc.fail  equ	$00ff		; RTC failed
rtc.ok	  equ	$ff00		; RTC ok
sgo_confg equ	$08		; Config as stored in the RTC interrupt bits!
sgo_f1f2  equ	$08		; Config: AUTO_TKF1/F2 status (word)
sgo.autod equ	$0000		;   disabled
sgo.autoh equ	$ffff		;   auto HIRES
sgo.auto1 equ	$ff00		;   auto F1
sgo.auto2 equ	$00ff		;   auto F2
sgo_cscr2 equ	$0a		; Config: SCR2 enabled (0) or not (FF)
sgo_jggle equ	$0b		; Config: FLP_JIGGLE enabled or disabled
sgo_cache equ	$0c		; >0 = cache enabled
sgo_hires equ	$10		; some hires marker or 0
sgo.hires equ	$b8be4741	; $4741 = "GA" = NOT($b8be)

; $1c200
glo_ptch  equ	$200		; patch area offset

; patch code offset (relative to glx_ptch $1c200)
glk.base	equ	$00	; base address
glk.card	equ	$04	; card type 0 = SGC, 2 = GC
glk.proc	equ	$06	; processor type (sgc)

glk.mdvt	equ	$08	; MDV timing table
glk.mdrd	equ	$0a	; MDV read sector
glk.mdwr	equ	$0c	; MDV write sector
glk.mdvr	equ	$0e	; MDV verify sector
glk.mdsh	equ	$10	; MDV read sector header
glk.mdf 	equ	$12	; MDV format
glk.mdsl	equ	$14	; MDV select
glk.mdds	equ	$16	; MDV deselect

glk.extr	equ	$1a	; extension ROM entry point
glk.chan	equ	$1c	; SuperBASIC channel open
glk.graf	equ	$1e	; MG Graphics patch
glk.ext_rom	equ	$20	; init ROMs in extended I/O (+skip FLP in QL mode)
sgk.privv	equ	$22	; priviledge violation
glk.i2ce	equ	$24	; GC I2C entry
glk.i2c 	equ	$26	; I2C raw code
glk.sdly	equ	$28	; serial transmit delay
sgk.8049.rte	equ	$2a	; fix 8049 code RTE
sgk.ser.sched	equ	$2c	; serial receive scheduler task
sgk.qdos.trp0	equ	$2e	; trap #0 (QDOS)

glk.init	equ	$30	; initialise (S)GC. Called by extension ROM code
sgk.trp3	equ	$32	; trap #3
sgk.trp1	equ	$34	; trap #1
sgk.trp2	equ	$36	; trap #2

sgk.min.sched	equ	$38	; Minerva scheduler patch
sgk.int2.rte	equ	$3a
sgk.qdos.sched	equ	$3c	; QDOS scheduler patch
sgk.boot.sched	equ	$3e	; SGC Minerva bootup RTE patch

sgk.i2		equ	$40	; autoint 2
sgk.aerr	equ	$42	; address error
sgk.div0	equ	$44	; div by 0
sgk.chk 	equ	$46	; chk
sgk.trpv	equ	$48	; trapv
sgk.trac	equ	$4a	; trace
sgk.min.trp0	equ	$4c	; trap #0 (Minerva)
sgk.trp4	equ	$50	; trap #4

sgk.i2ce	equ	$52	; SGC I2C entry
sgk.i2c 	equ	$54	; SGC I2C raw code
glk.min.reset3	equ	$56	; Minerva reset for some version

sgk.alin	equ	$58	; line a emulation
sgk.flin	equ	$5a	; line f emulation

glk.trp1	equ	$5c	; GoldCard trap #1 intercept

sgk.ilin	equ	$60	; illegal exception vector
sgk.trp5	equ	$62	; trap #5
sgk.trp6	equ	$64	; ...
sgk.trp7	equ	$66
sgk.trp8	equ	$68
sgk.trp9	equ	$6a
sgk.trpa	equ	$6c
sgk.trpb	equ	$6e
sgk.trpc	equ	$70
sgk.trpd	equ	$72
sgk.trpe	equ	$74
sgk.trpf	equ	$76

sgk.nsbyt	equ	$78	; network send bytes (SGC)
glk.nsbyt	equ	$7a	; network send bytes. Must follow sgk.nsbyt
sgk.nrbyt	equ	$7c	; network receive bytes (SGC)
glk.nrbyt	equ	$7e	; network receive bytes. Must follow sgk.nrbyt
sgk.nscot	equ	$80	; network search scout (SGC)
glk.nscot	equ	$82	; network search scour. Must follow sgk.nscot

glk.f1f2	equ	$84	; auto-press F1/F2

glk.chnt	equ	$86	; reserve space in name table
glmk.cls	equ	$88	; clear Masterpiece VRAM
glmk.cls2	equ	$8A	; clear Masterpiece VRAM
glmk.ptr.gen	equ	$8C	; patch PTR_GEN init
glmk.cls3	equ	$94	; clear Masterpiece VRAM
glmk.cls4	equ	$96	; clear Masterpiece VRAM

glk_ptop	equ	$98	; top most patch

; patch commands
glp.end  equ	$00	; end of patch list
glp.word equ	$02	; patch word in ROM
glp.trap equ	$04	; trap intercept
glp.vect equ	$06	; insert vector (JMP xxxx.l) to new code
glp.moff equ	$4000	; Microdrive vector offset
glp.ptch equ	$08	; insert patch (JSR xxxx.l)
glp.time equ	$0a	; patch timing constants
glp.addr equ	$0c	; patch address
glp.indr equ	$0e	; patch indirect address

; patch data structure
glp_type equ	$00	; type of patch
glp_addr equ	$02	; addr in ROM to patch or jump or ...
glp_calc equ	$02	; ... NOT offset of address calc
glp_oldw equ	$04	; old word at address or ...
glp_calp equ	$04	; ... address calculation parameter
glp_ptch equ	$06	; patch data or patch number

	list

; Gold card Trap #1 etc

	section patch

	xdef	gl_trap0
	xdef	gl_exv1
	xdef	gl_exv2
	xdef	gl_exv3
	xdef	gl_exv4
	xdef	gl_exv5
	xdef	gl_exv6
	xdef	gl_exv7
	xdef	gl_exv8
	xdef	gl_exv9
	xdef	gl_exva
	xdef	gl_exvb
	xdef	gl_exvc
	xdef	gl_exvd
	xdef	gl_exve
	xdef	gl_exvf
	xdef	gl_exv10
	xdef	gl_exv11
	xdef	gl_exv12
	xdef	gl_rte

	xdef	gl_trap11
	xdef	gl_trap12

	xdef	ms_ntabt

	xref	gl_rdate
	xref	gl_sdate
	xref	gl_adate

	include 'dev8_keys_qdos_sms'
	include 'dev8_sys_gold_keys'

gl_trap0
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	bset	#$5,(a7)
	bclr	#$7,(a7)
	rte

gl_exv1
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv2
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv3
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv4
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv5
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv6
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv7
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv8
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv9
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exva
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exvb
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exvc
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exvd
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exve
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exvf
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv10
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv11
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_exv12
	dc.w	$c
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	jmp	$12345678		 ; jump address to be patched

gl_rte
	moveq	#9,d7
	btst	#$5,$c(sp)
	bne.s	glr_rtec		 ; supervisor mode call
	tst.b	sgo_cache+sgx_work	 ; cache?
	bne.s	glr_rtec
	moveq	#0,d7
glr_rtec
	dc.l	$4e7b7002
	movem.l (sp)+,d7/a5/a6
	rte

	xdef	ms_ntabt

ms_ntabt dc.w	ntabt_ms-*
ntabt_ms dc.w	12
	 dc.b	'Net aborted',$a

gt1_nslug
	move.l	#$ffff0000,sgo_slug+sgx_work
gt1_hdop
	moveq	#sms.hdop,d0
gt1_cont
	jmp	$12345678

;+++
; Gold Card Trap #1 intercept.
;---
gl_trap11
	move.l	d0,-(sp)
	moveq	#9,d0
	dc.l	$4e7b0002      ; clear cache
	move.l	(sp)+,d0
	cmp.w	#sms.rrtc,d0		 ; less than read real time clock?
	blo.s	gt1_other
	beq.s	gt1_rrtc
	cmp.w	#sms.artc,d0		 ; greater than adjust real time clock?
	bhi.s	gt1_cont
	blo.s	gt1_srtc

gt1_artc
	bsr.l	gl_adate		 ; adjust date
	bra.s	gt1_rtcx

gt1_rrtc
	bsr.l	gl_rdate		 ; read date
gt1_rtcx
	btst	#$5,(sp)
	bne.s	gt1_rtec		 ; supervisor mode call
	tst.b	sgo_cache+sgx_work	 ; cache?
	bne.s	gt1_rtec
	move.l	d0,-(sp)
	moveq	#0,d0
	dc.l	$4e7b0002
	move.l	(sp)+,d0
gt1_rtec
	rte

	move.w	d7,-(a7)
	tst.l	d0
	move.w	sr,d7
	move.b	d7,3(a7)
	move.w	(a7)+,d7
	rte

gt1_srtc
	bsr.l	gl_sdate		 ; set date
	bra.s	gt1_rtcx

gt1_other
	cmp.w	#sms.hdop,d0
	bne.s	gt1_cont		 ; not hdop
	cmp.b	#9,(a3) 		 ; keyrow?
	bne.s	gt1_cont
	moveq	#0,d0
	move.w	sgo_slug+sgx_work,d0
	not.w	d0
	beq.s	gt1_hdop
	cmp.w	sgo_slug+2+sgx_work,d0
	bne.l	gt1_nslug

	mulu	#$197,d0		 ; x197

gt1_pause
	tst.l	$18000
	subq.l	#1,d0			 ; 06
	bne.s	gt1_pause		 ; 06 = 8us

	bra.l	gt1_hdop



gt2_nslug
	move.l	#$ffff0000,sgo_slug+sgx_work
gt2_hdop
	moveq	#sms.hdop,d0
gt2_cont
	jmp	$12345678

;+++
; Gold Card Trap #1 intercept.
;---
gl_trap12
	cmp.w	#sms.rrtc,d0		 ; less than read real time clock?
	blo.s	gt2_other
	beq.s	gt2_rrtc
	cmp.w	#sms.artc,d0		 ; greater than adjust real time clock?
	bhi.s	gt2_cont
	blo.s	gt2_srtc

gt2_artc
	bsr.l	gl_adate		 ; adjust date
	bra.s	gt1_rtec

gt2_rrtc
	bsr.s	gl_rdate		 ; read date
	bra.s	gt1_rtec

gt2_srtc
	bsr.l	gl_sdate		 ; set date
	bra.s	gt1_rtec

gt2_other
	cmp.w	#sms.hdop,d0
	bne.s	gt2_cont		 ; not hdop
	cmp.b	#9,(a3) 		 ; keyrow?
	bne.s	gt2_cont
	moveq	#0,d0
	move.w	sgo_slug+sgx_work,d0
	not.w	d0
	beq.s	gt2_hdop
	cmp.w	sgo_slug+2+sgx_work,d0
	bne.s	gt2_nslug

	lsl.l	#7,d0			 ; x128

gt2_pause
	rol.w	#8,d0
	rol.w	#8,d0
	rol.w	#8,d0
	rol.w	#8,d0
	lsl.l	#3,d0
	lsr.l	#3,d0
	subq.l	#1,d0			 ; 06
	bne.s	gt2_pause		 ; 06 = 8us

	bra.s	gt2_hdop


	end

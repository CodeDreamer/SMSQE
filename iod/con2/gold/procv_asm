; Gold Card initialise QL Mode Displays        1992  Tony Tebby  QJUMP

	section init

	xdef	cn_procv

	xref	au_sizes

	xref	gu_tpadd
	xref	gu_thini
	xref	ut_procdef

	include 'dev8_keys_aurora'
	include 'dev8_keys_con'
	include 'dev8_keys_sys'
	include 'dev8_keys_qdos_sms'
;	 include 'dev8_iod_bim_dddb_keys'  (exclusion - wl)
	include 'dev8_keys_chn'
	include 'dev8_keys_iod'
	include 'dev8_keys_err'
	include 'dev8_keys_thg'
	include 'dev8_mac_proc'
	include 'dev8_mac_thg'
	include 'dev8_mac_basic'
	include 'dev8_mac_assert'


;+++
; initialise QVME Thing and procs
;---
cn_procv
	lea	glv_defs,a1		 ; Thing definition
	jsr	gu_thini

	lea	glv_xprocs,a1
	jsr	gu_tpadd

	lea	glv_procs,a1
	jmp	ut_procdef

glv_defs dc.l	th_name+2+4
	dc.l	glv_thing-*
	dc.l	'2.00'
glv_tnam dc.w	4,'QVME'

	section con

;******************************************************************************
;
; Here is the code to re-initialise the Aurora display
;
;******************************************************************************

glv_xprocs
	prc_stt glv_tnam
	prc_def SIZE,Disp_size
	prc_def RATE,Disp_rate
	prc_def BLNK,Disp_blank
	prc_end

glv_procs
	proc_stt
	proc_ref DISP_COLOUR
	proc_ref DISP_SIZE
	proc_ref DISP_RATE
	proc_ref DISP_BLANK
	proc_ref DISP_INVERSE
	proc_end
	proc_stt
	proc_ref DISP_TYPE
	proc_end

	proc_thg QVME
	fun40_thg QVME

disp_colour proc COLR
disp_size proc	SIZE
disp_type fun40 TYPE

disp_rate
disp_blank
disp_inverse
disp_do
glv_rtsok
	moveq	#0,d0
	rts

glv_pclr
	 dc.w  thp.opt+thp.swrd+thp.nnul ; optional unsigned word
glv_psiz
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
glv_prat
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
glv_pblnk
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
glv_uwrd
	 dc.w  thp.opt+thp.uwrd  ; optional unsigned word
	 dc.w	0

glv_rword dc.w thp.ret+thp.swrd
	 dc.w	0

glv_thing
;+++
; invert display
;     (a1)     pointer to 0/1
;---
glv_invr thg_extn INVR,glv_type,glv_uwrd
	bra.s	disp_do

;+++
; find display type = 0
;     4(a1)	pointer to value
;---
glv_type thg_extn TYPE,glv_colr,glv_rword
	moveq	#sms.xtop,d0
	trap	#do.smsq
	moveq	#0,d0
	move.b	sys_mtyp(a6),d0 ; display type in most sig 3 bits
	lsr.b	#5,d0
	move.b	glv_ttab(pc,d0.w),d0
	move.l	a1,-(sp)
	move.l	4(a1),a1
	move.w	d0,(a1)	; return it
	move.l	(sp)+,a1
	moveq	#0,d0
	rts

glv_ttab dc.b	0,4,1,6,2,5,3,7

;+++
; Gold card colour depth change
;	(a1)	colour depth code
;	then size
;	then rate
;	then blank
;---
glv_colr thg_extn COLR,glv_size,glv_pclr
glv.reg reg	d1/d2/d3/d4/d6/a0/a1/a2/a3/a4
	movem.l glv.reg,-(sp)

	move.l	(a1)+,d3		; colour depth
	move.w	d3,d0
	beq.s	glvs_size 	; QL
	subq.w	#ptd.08,d0		; or 8 bit
;;;;	    beq.s   glvs_size
	bra.s	glvs_scolr

;+++
; Gold card size change
;	(a1)	x
;      4(a1)	y
;	then rate
;	then blank
;---
glv_size thg_extn SIZE,glv_frrt,glv_psiz
	movem.l glv.reg,-(sp)

glvs_scolr
	moveq	#-1,d3			; no colour depth change

glvs_size
	movem.l (a1),d1/d2

	bsr.s	glvs_do

	movem.l (sp)+,glv.reg
	moveq	#0,d0
glvs_rts
	rts

glvs_do
	moveq	#sms.xtop,d0
	trap	#1

	moveq	#$ffffffe0,d0		 ; display type in most sig 3 bits
	and.b	sys_mtyp(a6),d0
	cmp.b	#sys.maur,d0		 ; Aurora?
	bne	glv_rtsok 	 ; ... no

	move.l	d3,d7			 ; colour depth mode required

	lea	au_sizes,a2		 ; Aurora sizes
	movem.l (a1),d1/d2		 ; size required
	moveq	#-1,d6
	moveq	#3,d0
glvs_look
	addq.l	#1,d6
	cmp.w	(a2)+,d1		 ; next size
	dble	d0,glvs_look

	add.l	d2,d2			 ; twice height
	cmp.l	d1,d2			 ; is Y more than 1/2 x?
	shi	d0			 ; ... yes
	lsl.b	#7,d0
	or.b	d0,d6			 ; set square pixel flag
	moveq	#$ffffff87,d0
	and.b	sys_hstt(a6),d0	 ; old mode
	cmp.b	d6,d0			 ; new size?
	beq	glv_rtsok 	 ; ... no

	move.l	pt_change(a3),a1
	jmp	(a1)

;+++
; Gold Card Aurora set frame rate, line rate
;
;	(a1)	frame rate
;      4(a1)	line rate
;---
glv_frrt thg_extn RATE,glv_blnk,glv_prat
	bra	disp_do

;+++
; Gold Card Aurora set blank
;
;	(a1)	x blank
;      4(a1)	y blank
;---
glv_blnk thg_extn BLNK,,glv_pblnk
	bra	disp_do

	end
